#!/usr/bin/env python3
"""
Task Validator and Auto-Fixer

This module provides comprehensive validation and automatic fixing for generated task JSON data.
It checks task structure, validates task categories, fixes validation_checks format,
verifies location_id values, and ensures object existence in scenes.
"""

import json
import re
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple, Set

import pandas as pd

import logging


class TaskValidator:
    """Validator for task JSON data with automatic fixing capabilities."""

    def __init__(self, attribute_actions_csv_path: str = None, scene_dir: Optional[Path] = None):
        """
        Initialize the task validator.

        Args:
            attribute_actions_csv_path: Path to the attribute actions CSV file
            scene_dir: Directory containing scene files for persistent modifications
        """
        self.logger = logging.getLogger(__name__)

        # ËÆæÁΩÆÈªòËÆ§CSVË∑ØÂæÑ
        if attribute_actions_csv_path is None:
            project_root = Path(__file__).parent.parent.parent  # È°πÁõÆÊ†πÁõÆÂΩï
            attribute_actions_csv_path = str(project_root / 'data' / 'attribute_actions.csv')

        self.attribute_actions_csv_path = attribute_actions_csv_path
        self.attribute_actions_df = None
        self.valid_task_categories = {
            'direct_command', 'attribute_reasoning', 'tool_use', 'compound_reasoning',
            'explicit_collaboration', 'implicit_collaboration', 'compound_collaboration'
        }

        # Scene directory for saving modified scene files
        self.scene_dir = Path(scene_dir) if scene_dir else None

        # Track modified scenes to avoid duplicate saves
        self._modified_scenes = set()

        # Scene data management for intelligent caching and saving
        self._scene_data_cache = {}  # Cache loaded scene data
        self._scene_modifications = {}  # Track scene modification status
        self._pending_saves = set()  # Track scenes that need to be saved
        self._scene_task_counts = {}  # Track how many tasks per scene are being processed

        # Task data management for intelligent caching
        self._task_data_cache = {}  # Cache task data by task file ID

        # Load attribute actions CSV
        self._load_attribute_actions()

    def _get_cached_scene_data(self, scene_data: Dict[str, Any], scene_id: str) -> Dict[str, Any]:
        """
        Get scene data from cache or add to cache if not present.
        Always returns the most up-to-date version of scene data.

        Args:
            scene_data: Scene data passed from external caller
            scene_id: Scene ID

        Returns:
            The cached (and potentially modified) scene data
        """
        if scene_id in self._scene_data_cache:
            # Use cached version which may have modifications
            self.logger.debug(f"Using cached scene data for scene {scene_id}")
            return self._scene_data_cache[scene_id]
        else:
            # First time processing this scene, add to cache
            self._scene_data_cache[scene_id] = scene_data.copy()
            self.logger.debug(f"Added scene {scene_id} to cache")
            return self._scene_data_cache[scene_id]

    def _get_cached_task_data(self, task_data: Dict[str, Any], task_file_id: str) -> Dict[str, Any]:
        """
        Get task data from cache or add to cache if not present.
        Always returns the most up-to-date version of task data.

        Args:
            task_data: Task data passed from external caller
            task_file_id: Task file identifier (e.g., "00001")

        Returns:
            The cached (and potentially modified) task data
        """
        if task_file_id in self._task_data_cache:
            # Use cached version which may have modifications
            self.logger.debug(f"Using cached task data for task file {task_file_id}")
            return self._task_data_cache[task_file_id]
        else:
            # First time processing this task file, add to cache
            self._task_data_cache[task_file_id] = task_data.copy()
            self.logger.debug(f"Added task file {task_file_id} to cache")
            return self._task_data_cache[task_file_id]

    def _register_scene_task(self, scene_id: str):
        """Register that a task for this scene is being processed."""
        if scene_id not in self._scene_task_counts:
            self._scene_task_counts[scene_id] = 0
        self._scene_task_counts[scene_id] += 1
        self.logger.debug(f"Scene {scene_id} task count: {self._scene_task_counts[scene_id]}")

    def _unregister_scene_task(self, scene_id: str) -> bool:
        """
        Unregister a task for this scene and return whether this was the last task.

        Returns:
            True if this was the last task for this scene, False otherwise
        """
        if scene_id in self._scene_task_counts:
            self._scene_task_counts[scene_id] -= 1
            is_last_task = self._scene_task_counts[scene_id] <= 0
            if is_last_task:
                # Clean up the counter
                del self._scene_task_counts[scene_id]
            self.logger.debug(f"Scene {scene_id} remaining tasks: {self._scene_task_counts.get(scene_id, 0)}")
            return is_last_task
        return True  # If not tracked, assume it's the last task

    def _mark_scene_for_save(self, scene_id: str):
        """Mark a scene as needing to be saved."""
        self._pending_saves.add(scene_id)
        self.logger.debug(f"Marked scene {scene_id} for saving")

    def _update_task_data_cache(self, task_file_id: str, updated_task_data: Dict[str, Any]):
        """Update the cached task data with modifications."""
        if task_file_id:
            self._task_data_cache[task_file_id] = updated_task_data.copy()
            self.logger.debug(f"Updated cached task data for task file {task_file_id}")

    def _flush_scene_modifications(self):
        """Save all pending scene modifications to files."""
        if not self._pending_saves:
            return

        self.logger.debug(f"Flushing {len(self._pending_saves)} pending scene saves")

        for scene_id in list(self._pending_saves):
            if scene_id in self._scene_data_cache:
                success = self._save_scene_file(self._scene_data_cache[scene_id], scene_id)
                if success:
                    self._pending_saves.remove(scene_id)
                    self.logger.debug(f"Successfully saved scene {scene_id}")
                else:
                    self.logger.error(f"Failed to save scene {scene_id}")

    def _save_scene_file(self, scene_data: Dict[str, Any], scene_id: str) -> bool:
        """
        Save modified scene data to file.

        Args:
            scene_data: Modified scene data
            scene_id: Scene ID (e.g., "00001")

        Returns:
            bool: True if saved successfully, False otherwise
        """
        if not self.scene_dir:
            self.logger.warning(f"Scene directory not set, cannot save scene {scene_id}")
            return False

        # Avoid duplicate saves for the same scene
        if scene_id in self._modified_scenes:
            self.logger.debug(f"Scene {scene_id} already saved in this session")
            return True

        try:
            scene_file = self.scene_dir / f"{scene_id}_scene.json"

            # Ensure directory exists
            self.scene_dir.mkdir(parents=True, exist_ok=True)

            # Save scene data
            with open(scene_file, 'w', encoding='utf-8') as f:
                json.dump(scene_data, f, indent=2, ensure_ascii=False)

            # Mark as saved
            self._modified_scenes.add(scene_id)

            self.logger.info(f"üíæ Saved modified scene data to {scene_file}")
            return True

        except Exception as e:
            self.logger.error(f"Failed to save scene {scene_id}: {e}")
            return False

    def _load_attribute_actions(self):
        """Load the attribute actions CSV file."""
        try:
            if Path(self.attribute_actions_csv_path).exists():
                self.attribute_actions_df = pd.read_csv(self.attribute_actions_csv_path)
                self.logger.info(f"Loaded {len(self.attribute_actions_df)} attribute actions from CSV")
            else:
                self.logger.warning(f"Attribute actions CSV not found: {self.attribute_actions_csv_path}")
        except Exception as e:
            self.logger.error(f"Failed to load attribute actions CSV: {e}")

    def validate_and_fix_task_data(self, task_data: Dict[str, Any], scene_data: Dict[str, Any],
                                   auto_fix: bool = True) -> Tuple[bool, List[str], Dict[str, Any], List[str]]:
        """
        Validate and optionally fix task data with proper check-then-fix workflow.

        Args:
            task_data: Generated task data to validate
            scene_data: Original scene data for reference
            auto_fix: Whether to automatically fix issues

        Returns:
            Tuple of (is_valid, error_messages, fixed_task_data, fixes_applied)
        """
        self.logger.info("üîç Starting task validation process...")

        # Get scene ID and task file ID for caching
        scene_id = task_data.get('scene_id')
        task_file_id = str(scene_id).zfill(5) if scene_id else None

        # Manage scene data caching
        if scene_id:
            scene_id_str = str(scene_id).zfill(5)
            # Register this task for the scene
            self._register_scene_task(scene_id_str)
            # Use cached scene data if available, otherwise cache the provided data
            actual_scene_data = self._get_cached_scene_data(scene_data, scene_id_str)
        else:
            actual_scene_data = scene_data
            scene_id_str = None

        # Manage task data caching
        if task_file_id:
            actual_task_data = self._get_cached_task_data(task_data, task_file_id)
        else:
            actual_task_data = task_data

        # Step 1: Initial validation (check only)
        self.logger.info("üìã Step 1: Performing initial validation check...")
        initial_errors, has_removable_tasks = self._validate_task_data_check_only(actual_task_data, actual_scene_data)

        if initial_errors:
            self.logger.warning(f"‚ùå Found {len(initial_errors)} validation issues:")
            for i, error in enumerate(initial_errors, 1):
                self.logger.warning(f"   {i}. {error}")
        elif not has_removable_tasks:
            self.logger.info("‚úÖ No validation issues found!")
            return True, [], actual_task_data, []
        else:
            self.logger.info("‚ÑπÔ∏è  No errors found, but some tasks may need to be removed")

        # Step 2: Apply fixes if requested
        fixes_applied = []
        fixed_data = actual_task_data.copy() if actual_task_data else {}

        if auto_fix:
            self.logger.info("üîß Step 2: Applying automatic fixes...")

            try:
                # Apply structure fixes
                structure_fixes = self._apply_structure_fixes(fixed_data)
                fixes_applied.extend(structure_fixes)

                # Apply task-level fixes using cached scene data
                if 'tasks' in fixed_data:
                    task_fixes = self._apply_task_fixes(fixed_data['tasks'], actual_scene_data, fixed_data)
                    fixes_applied.extend(task_fixes)

                if fixes_applied:
                    self.logger.info(f"‚úÖ Applied {len(fixes_applied)} fixes:")
                    for i, fix in enumerate(fixes_applied, 1):
                        self.logger.info(f"   {i}. {fix}")
                    # Update task data cache with the fixed data
                    if task_file_id:
                        self._update_task_data_cache(task_file_id, fixed_data)
                else:
                    self.logger.info("‚ÑπÔ∏è  No fixes could be applied automatically")

            except Exception as e:
                self.logger.error(f"üí• Error during fix application: {e}")
                # Unregister task before returning
                if scene_id_str:
                    self._unregister_scene_task(scene_id_str)
                return False, initial_errors + [f"Fix application error: {str(e)}"], actual_task_data, []
        else:
            self.logger.info("‚è≠Ô∏è  Step 2: Skipping fixes (auto_fix=False)")

        # Step 3: Final validation using cached scene data
        self.logger.info("üîç Step 3: Performing final validation...")
        final_errors, _ = self._validate_task_data_check_only(fixed_data, actual_scene_data)

        if final_errors:
            self.logger.warning(f"‚ùå {len(final_errors)} issues remain after fixes:")
            for i, error in enumerate(final_errors, 1):
                self.logger.warning(f"   {i}. {error}")
        else:
            self.logger.info("‚úÖ All issues resolved!")

        # Step 4: Handle scene data saving
        if scene_id_str:
            is_last_task = self._unregister_scene_task(scene_id_str)
            if is_last_task and scene_id_str in self._pending_saves:
                self.logger.info(f"üîÑ Last task for scene {scene_id_str}, triggering save...")
                self._flush_scene_modifications()

        is_valid = len(final_errors) == 0
        return is_valid, final_errors, fixed_data, fixes_applied

    def _validate_task_data_check_only(self, task_data: Dict[str, Any], scene_data: Dict[str, Any]) -> Tuple[List[str], bool]:
        """
        Validate task data without making any changes (check-only mode).

        Args:
            task_data: Task data to validate
            scene_data: Scene data for reference

        Returns:
            Tuple of (error_messages, has_removable_tasks)
        """
        errors = []

        try:
            # Check basic structure
            structure_errors = self._check_structure(task_data)
            errors.extend(structure_errors)

            # Check tasks
            if 'tasks' in task_data and isinstance(task_data['tasks'], list):
                scene_objects = self._extract_scene_objects(scene_data)
                scene_rooms = self._extract_scene_rooms(scene_data)
                scene_abilities = self._extract_scene_abilities(scene_data)

                # Set current agents_config for physical constraint checking
                self._current_agents_config = task_data.get('agents_config', [])

                # Count valid tasks (not marked for removal)
                valid_tasks_count = 0
                removable_tasks_count = 0
                total_tasks = len(task_data['tasks'])

                for i, task in enumerate(task_data['tasks']):
                    task_errors, should_remove = self._check_single_task(
                        task, i, scene_objects, scene_rooms, scene_abilities
                    )

                    # Add real errors (not removal flags)
                    errors.extend(task_errors)

                    # Count tasks that are not marked for removal
                    if not should_remove:
                        valid_tasks_count += 1
                    else:
                        removable_tasks_count += 1

                # If all tasks should be removed, add a special error to indicate file should be deleted
                if valid_tasks_count == 0 and total_tasks > 0:
                    errors.append("All tasks in this file should be removed - file will be deleted")

                has_removable_tasks = removable_tasks_count > 0
            else:
                has_removable_tasks = False

        except Exception as e:
            errors.append(f"Validation check error: {str(e)}")
            has_removable_tasks = False

        return errors, has_removable_tasks

    def _check_structure(self, task_data: Dict[str, Any]) -> List[str]:
        """Check basic task data structure without fixing."""
        errors = []

        # Check required top-level fields
        required_fields = ['task_background', 'agents_config', 'tasks']
        for field in required_fields:
            if field not in task_data:
                errors.append(f"Missing required field: {field}")

        # Check task_background
        if 'task_background' in task_data:
            if not isinstance(task_data['task_background'], str) or not task_data['task_background'].strip():
                errors.append("task_background must be a non-empty string")

        # Check agents_config
        if 'agents_config' in task_data:
            agents_config = task_data['agents_config']
            if not isinstance(agents_config, list) or len(agents_config) != 2:
                errors.append("agents_config must be a list with exactly 2 agents")

        # Check tasks is a list
        if 'tasks' in task_data:
            if not isinstance(task_data['tasks'], list):
                errors.append("tasks must be a list")
            elif len(task_data['tasks']) == 0:
                errors.append("tasks list cannot be empty")

        return errors

    def _check_single_task(self, task: Dict[str, Any], task_index: int,
                          scene_objects: Dict[str, Any], scene_rooms: Dict[str, Any],
                          scene_abilities: List[str]) -> Tuple[List[str], bool]:
        """
        Check a single task without fixing.

        Returns:
            Tuple of (errors, should_remove)
        """
        errors = []

        if not isinstance(task, dict):
            errors.append(f"Task {task_index} must be a dictionary")
            return errors, False

        # Check if task should be removed due to unfixable issues
        should_remove, remove_reason = self._should_remove_task(
            task, task_index, scene_objects, scene_rooms, scene_abilities
        )

        if should_remove:
            # Don't add this as an error, just return the removal flag
            return [], True

        # Check required fields
        required_fields = ['task_description', 'task_category', 'validation_checks']
        for field in required_fields:
            if field not in task:
                errors.append(f"Task {task_index} missing required field: {field}")



        # Check validation_checks
        if 'validation_checks' in task:
            validation_checks = task['validation_checks']
            if not isinstance(validation_checks, list):
                errors.append(f"Task {task_index} validation_checks must be a list")
            elif len(validation_checks) == 0:
                errors.append(f"Task {task_index} validation_checks must not be empty")
            else:
                for j, check in enumerate(validation_checks):
                    check_errors = self._check_validation_check(
                        check, task_index, j, task.get('task_description', ''),
                        scene_objects, scene_rooms, scene_abilities
                    )
                    errors.extend(check_errors)

        # Check physical constraints (Êñ∞Â¢û) - Âè™ÂØπÊê¨Ëøê‰ªªÂä°ËøõË°åÊ£ÄÊü•
        if self._is_move_task(task):
            task_objects = self._extract_task_objects(task, scene_objects)
            # ‰ªétask_data‰∏≠Ëé∑Âèñagents_configÔºåÂ¶ÇÊûúÊ≤°ÊúâÂàô‰ΩøÁî®None
            agents_config = getattr(self, '_current_agents_config', None)
            constraint_violations = self._check_physical_constraints(task_objects, scene_objects, agents_config, task)
            if constraint_violations:
                for violation in constraint_violations:
                    errors.append(f"Task {task_index} physical constraint violation: {violation}")

        return errors, False

    def _check_validation_check(self, check: Dict[str, Any], task_index: int, check_index: int,
                               task_description: str, scene_objects: Dict[str, Any],
                               scene_rooms: Dict[str, Any], scene_abilities: List[str]) -> List[str]:
        """Check a single validation check without fixing."""
        errors = []

        if not isinstance(check, dict):
            errors.append(f"Task {task_index} validation_check {check_index} must be a dictionary")
            return errors

        # Check for nested properties
        if 'properties' in check:
            errors.append(f"Task {task_index} validation_check {check_index} should not have nested 'properties'")

        # Check required 'id' field
        if 'id' not in check:
            errors.append(f"Task {task_index} validation_check {check_index} missing required 'id' field")
            return errors

        object_id = check['id']

        # Check if object exists in scene
        if object_id not in scene_objects and object_id not in scene_rooms:
            errors.append(f"Task {task_index} validation_check {check_index}: Object '{object_id}' does not exist in scene")

        # Check location_id if present
        if 'location_id' in check:
            location_errors = self._check_location_id(
                check['location_id'], task_index, check_index, task_description,
                scene_objects, scene_rooms
            )
            errors.extend(location_errors)

        # Check other attributes using CSV
        for attr_name, attr_value in check.items():
            if attr_name not in ['id', 'location_id']:
                attr_errors = self._check_attribute_value(
                    attr_name, attr_value, task_index, check_index, task_description, scene_abilities
                )
                errors.extend(attr_errors)

        return errors

    def _check_location_id(self, location_id: str, task_index: int, check_index: int,
                          task_description: str, scene_objects: Dict[str, Any],
                          scene_rooms: Dict[str, Any]) -> List[str]:
        """Check location_id format and correctness."""
        errors = []

        if not location_id:
            return errors

        # Analyze task description for spatial prepositions
        description_lower = task_description.lower()
        has_in = ' in ' in description_lower or description_lower.startswith('in ')
        has_on = ' on ' in description_lower or description_lower.startswith('on ')

        # Determine correct prefix based on task description
        if has_in and has_on:
            correct_prefix = ":"  # Both present, use empty prefix
        elif has_in:
            correct_prefix = "in:"
        elif has_on:
            correct_prefix = "on:"
        else:
            correct_prefix = ":"  # Neither present, use empty prefix

        # Extract base location (remove existing prefix if any)
        if location_id.startswith(('in:', 'on:', ':')):
            base_location = location_id.split(':', 1)[1] if ':' in location_id else location_id
        else:
            base_location = location_id

        # Construct correct location_id
        correct_location_id = f"{correct_prefix}{base_location}"

        # Check if current location_id matches the expected format
        if location_id != correct_location_id:
            if correct_prefix == ":":
                errors.append(f"Task {task_index} validation_check {check_index}: "
                             f"location_id '{location_id}' should be '{correct_location_id}' (empty prefix - no spatial preposition found)")
            elif correct_prefix == "in:":
                errors.append(f"Task {task_index} validation_check {check_index}: "
                             f"location_id '{location_id}' should be '{correct_location_id}' (in: prefix expected)")
            elif correct_prefix == "on:":
                errors.append(f"Task {task_index} validation_check {check_index}: "
                             f"location_id '{location_id}' should be '{correct_location_id}' (on: prefix expected)")

        # Check if target location exists
        if base_location and base_location not in scene_objects and base_location not in scene_rooms:
            errors.append(f"Task {task_index} validation_check {check_index}: "
                         f"location_id target '{base_location}' does not exist in scene")

        return errors

    def _check_attribute_value(self, attr_name: str, attr_value: Any, task_index: int,
                              check_index: int, task_description: str, scene_abilities: List[str]) -> List[str]:
        """Check attribute value against scene abilities and CSV lookup."""
        errors = []

        # Find the best matching action in scene abilities
        best_action = self._find_best_matching_action(attr_name, task_description, scene_abilities)

        if best_action and self.attribute_actions_df is not None:
            # Look up the action in CSV to get expected value
            matching_rows = self.attribute_actions_df[
                (self.attribute_actions_df['attribute'] == attr_name) &
                (self.attribute_actions_df['action_name'] == best_action)
            ]

            if not matching_rows.empty:
                action_row = matching_rows.iloc[0]
                expected_value = not action_row['value']  # Take inverse as per requirement
                if attr_value != expected_value:
                    errors.append(f"Task {task_index} validation_check {check_index}: "
                                 f"Attribute '{attr_name}' should be {expected_value} "
                                 f"(inverse of CSV value {action_row['value']}, matched action: {best_action})")
        # Note: No error reported if no matching action found - attributes will be handled in repair phase

        return errors

    def _apply_structure_fixes(self, task_data: Dict[str, Any]) -> List[str]:
        """Apply fixes to basic structure."""
        fixes = []

        # Fix missing required fields
        required_fields = ['task_background', 'agents_config', 'tasks']
        for field in required_fields:
            if field not in task_data:
                if field == 'task_background':
                    task_data[field] = "Generated task background"
                    fixes.append(f"Added missing '{field}' field")
                elif field == 'agents_config':
                    task_data[field] = [
                        {"name": "robot_1", "max_grasp_limit": 1, "max_weight": 40.0, "max_size": [1.5, 1.5, 1.5]},
                        {"name": "robot_2", "max_grasp_limit": 1, "max_weight": 40.0, "max_size": [1.5, 1.5, 1.5]}
                    ]
                    fixes.append(f"Added default '{field}' configuration")
                elif field == 'tasks':
                    task_data[field] = []
                    fixes.append(f"Added empty '{field}' array")

        # Fix task_background
        if 'task_background' in task_data:
            if not isinstance(task_data['task_background'], str) or not task_data['task_background'].strip():
                task_data['task_background'] = "Generated task background"
                fixes.append("Fixed empty task_background")

        # Fix agents_config
        if 'agents_config' in task_data:
            agents_config = task_data['agents_config']
            if not isinstance(agents_config, list) or len(agents_config) != 2:
                task_data['agents_config'] = [
                    {"name": "robot_1", "max_grasp_limit": 1, "max_weight": 40.0},
                    {"name": "robot_2", "max_grasp_limit": 1, "max_weight": 40.0}
                ]
                fixes.append("Fixed agents_config structure")

        return fixes

    def _apply_task_fixes(self, tasks: List[Dict[str, Any]], scene_data: Dict[str, Any], task_data: Dict[str, Any]) -> List[str]:
        """Apply fixes to individual tasks."""
        fixes = []

        if not isinstance(tasks, list):
            return fixes

        # Set current agents_config for physical constraint checking
        self._current_agents_config = task_data.get('agents_config', [])

        # Get scene ID for saving modified scene files
        scene_id = task_data.get('scene_id')

        # Get scene data for validation
        scene_objects = self._extract_scene_objects(scene_data)
        scene_rooms = self._extract_scene_rooms(scene_data)
        scene_abilities = self._extract_scene_abilities(scene_data)

        # Track tasks to remove
        tasks_to_remove = []

        for i, task in enumerate(tasks):
            if not isinstance(task, dict):
                continue

            # Check if task should be removed due to unfixable issues
            should_remove, remove_reason = self._should_remove_task(
                task, i, scene_objects, scene_rooms, scene_abilities
            )

            if should_remove:
                tasks_to_remove.append((i, remove_reason))
                continue

            task_fixes = self._apply_single_task_fixes(
                task, i, scene_objects, scene_rooms, scene_abilities, scene_data, scene_id
            )
            fixes.extend(task_fixes)

            # Physical constraint fixes are now handled in _apply_task_fixes
            # by modifying object weights instead of agent capabilities

        # Remove tasks in reverse order to maintain indices
        for task_index, reason in reversed(tasks_to_remove):
            tasks.pop(task_index)
            fixes.append(f"Removed Task {task_index}: {reason}")

        return fixes

    def _should_remove_task(self, task: Dict[str, Any], task_index: int,
                           scene_objects: Dict[str, Any], scene_rooms: Dict[str, Any],
                           scene_abilities: List[str]) -> Tuple[bool, str]:
        """
        ‰∏•Ê†ºÊåâÁÖß‰∫îÊ≠•È™åËØÅÈ°∫Â∫èÁ°ÆÂÆö‰ªªÂä°ÊòØÂê¶Â∫îËØ•Ë¢´Âà†Èô§

        Á¨¨‰∏ÄÊ≠•Ôºö‰ªªÂä°Á±ªÂà´È™åËØÅ
        Á¨¨‰∫åÊ≠•ÔºöÂØπË±°IDÂ≠òÂú®ÊÄßÈ™åËØÅ
        Á¨¨‰∏âÊ≠•ÔºöÂ±ûÊÄßÈ™åËØÅÔºà‰ªÖÈíàÂØπÈùûlocation_idÂ±ûÊÄßÔºâ
        Á¨¨ÂõõÊ≠•ÔºöÁâ©ÁêÜÁ∫¶ÊùüÈ™åËØÅ
        Á¨¨‰∫îÊ≠•ÔºöÂàùÂßãÁä∂ÊÄÅ‰∏éÁõÆÊ†áÁä∂ÊÄÅÊØîËæÉÈ™åËØÅÔºàÊñ∞Â¢ûÔºâ

        Returns:
            Tuple of (should_remove, reason)
        """
        if not isinstance(task, dict):
            self.logger.warning(f"Task {task_index}: Not a dictionary, will be removed")
            return True, "Task is not a dictionary"

        # Á¨¨‰∏ÄÊ≠•Ôºö‰ªªÂä°Á±ªÂà´È™åËØÅ
        self.logger.debug(f"Task {task_index}: Step 1 - Validating task_category")
        if 'task_category' in task:
            category = task.get('task_category', '')
            if category not in self.valid_task_categories:
                self.logger.warning(f"Task {task_index}: Invalid task_category '{category}', will be removed")
                return True, f"Invalid task_category: '{category}'"
        else:
            self.logger.warning(f"Task {task_index}: Missing task_category field, will be removed")
            return True, "Missing task_category field"

        # Ê£ÄÊü•validation_checksÁªìÊûÑ
        if 'validation_checks' not in task or not isinstance(task['validation_checks'], list):
            self.logger.warning(f"Task {task_index}: Missing or invalid validation_checks, will be removed")
            return True, "Missing or invalid validation_checks"

        validation_checks = task['validation_checks']
        if len(validation_checks) == 0:
            self.logger.warning(f"Task {task_index}: Empty validation_checks, will be removed")
            return True, "Empty validation_checks"

        # Á¨¨‰∫åÊ≠•ÔºöÂØπË±°IDÂ≠òÂú®ÊÄßÈ™åËØÅ
        self.logger.debug(f"Task {task_index}: Step 2 - Validating object ID existence")
        for j, check in enumerate(validation_checks):
            if not isinstance(check, dict):
                self.logger.warning(f"Task {task_index}: validation_check {j} is not a dictionary, will be removed")
                return True, f"validation_check {j} is not a dictionary"

            # È™åËØÅidÂ≠óÊÆµÂèäÂÖ∂ÂØπÂ∫îÁöÑÂÄº
            object_id = check.get('id')
            if not object_id:
                self.logger.warning(f"Task {task_index}: validation_check {j} missing 'id' field, will be removed")
                return True, f"validation_check {j} missing 'id' field"

            # Ê£ÄÊü•ËØ•idÂØπÂ∫îÁöÑÁâ©‰ΩìÊòØÂê¶Â≠òÂú®‰∫éÂØπÂ∫îÂú∫ÊôØÁöÑJSONÊñá‰ª∂‰∏≠
            if object_id not in scene_objects and object_id not in scene_rooms:
                self.logger.warning(f"Task {task_index}: Object '{object_id}' does not exist in scene, will be removed")
                return True, f"Object '{object_id}' does not exist in scene"

        # Á¨¨‰∏âÊ≠•ÔºöÂ±ûÊÄßÈ™åËØÅÔºà‰ªÖÈíàÂØπÈùûlocation_idÂ±ûÊÄßÔºâ
        task_description = task.get('task_description', '')
        self.logger.debug(f"Task {task_index}: Step 3 - Validating attributes")

        # Ê£ÄÊü•ÊòØÂê¶ÊúâÈùûlocation_idÂ±ûÊÄßÈúÄË¶ÅÈ™åËØÅ
        if self._task_has_non_location_attributes(task):
            # Á°ÆÂÆö‰ªªÂä°ÂØπÂ∫îÁöÑÂä®‰ΩúÔºöÊ£ÄÊü•ÊØè‰∏™abilityÊòØÂê¶Âá∫Áé∞Âú®‰ªªÂä°ÊèèËø∞‰∏≠
            if not self._task_matches_any_scene_ability(task_description, scene_abilities):
                self.logger.warning(f"Task {task_index}: Task description does not match any supported scene abilities, will be removed")
                return True, f"Task description does not match any supported scene abilities"

        # Á¨¨ÂõõÊ≠•ÔºöÁâ©ÁêÜÁ∫¶ÊùüÈ™åËØÅ
        self.logger.debug(f"Task {task_index}: Step 4 - Validating physical constraints")

        # Ê£ÄÊü•ÊòØÂê¶ÊòØÊê¨Ëøê‰ªªÂä°‰∏îÂ≠òÂú®Áâ©ÁêÜÁ∫¶ÊùüËøùÂèç
        if self._is_move_task(task):
            # Ëé∑Âèñ‰ªªÂä°‰∏≠Ê∂âÂèäÁöÑÂØπË±°
            task_objects = self._extract_task_objects(task, scene_objects)

            # Ê£ÄÊü•Áâ©ÁêÜÁ∫¶ÊùüËøùÂèçÔºà‰ΩÜ‰∏çÂà†Èô§‰ªªÂä°ÔºåËÄåÊòØÊ†áËÆ∞ÈúÄË¶Å‰øÆÂ§çÔºâ
            agents_config = getattr(self, '_current_agents_config', None)
            constraint_violations = self._check_physical_constraints(task_objects, scene_objects, agents_config, task)
            if constraint_violations:
                self.logger.info(f"Task {task_index}: Found physical constraint violations that can be auto-fixed: {constraint_violations}")
                # ‰∏çÂà†Èô§‰ªªÂä°ÔºåËÆ©‰øÆÂ§çÈÄªËæëÂ§ÑÁêÜ

        # Á¨¨‰∫îÊ≠•ÔºöÂàùÂßãÁä∂ÊÄÅ‰∏éÁõÆÊ†áÁä∂ÊÄÅÊØîËæÉÈ™åËØÅÔºàÊñ∞Â¢ûÔºâ
        self.logger.debug(f"Task {task_index}: Step 5 - Validating initial vs target state")
        should_remove_redundant, redundant_reason = self._check_initial_vs_target_state(
            task, task_index, scene_objects, scene_rooms
        )
        if should_remove_redundant:
            self.logger.warning(f"Task {task_index}: {redundant_reason}, will be removed")
            return True, redundant_reason

        self.logger.debug(f"Task {task_index}: All validation steps passed, task will be kept")
        return False, ""

    def _task_has_non_location_attributes(self, task: Dict[str, Any]) -> bool:
        """
        Check if task has attributes other than 'id' and 'location_id'.

        Returns True if the task has attributes that require action validation.
        Returns False if the task only has location_id (no action validation needed).
        """
        validation_checks = task.get('validation_checks', [])

        for check in validation_checks:
            if not isinstance(check, dict):
                continue

            # Check if this validation_check has any attributes other than 'id' and 'location_id'
            for key in check.keys():
                if key not in ['id', 'location_id']:
                    return True  # Found a non-location attribute

        return False  # Only has 'id' and 'location_id'

    def _task_matches_any_scene_ability(self, task_description: str, scene_abilities: List[str]) -> bool:
        """
        Check if task description matches any scene ability.

        Returns True if at least one scene ability can be found in the task description.
        Returns False if no scene abilities match, indicating the task cannot be executed in this scene.
        """
        description_lower = task_description.lower()

        for ability in scene_abilities:
            score = self._score_action_match(ability, description_lower)
            if score > 0:
                return True  # Found at least one matching ability

        return False  # No abilities match this task description

    def _is_collaboration_task(self, task: Dict[str, Any]) -> bool:
        """Ê£ÄÊü•ÊòØÂê¶ÊòØÂêà‰Ωú‰ªªÂä° - Âü∫‰∫é‰ªªÂä°Á±ªÂûãÂà§Êñ≠"""
        task_category = task.get('task_category', '')
        task_description = task.get('task_description', 'Unknown task')

        # Âêà‰Ωú‰ªªÂä°ÁöÑÂõ∫ÂÆöÁ±ªÂûã
        collaboration_categories = {
            'explicit_collaboration',
            'implicit_collaboration',
            'compound_collaboration'
        }

        is_collaboration = task_category in collaboration_categories

        if is_collaboration:
            self.logger.debug(f"ü§ù Collaboration task detected: '{task_description}' (category: {task_category})")
        else:
            self.logger.debug(f"üë§ Single-agent task: '{task_description}' (category: {task_category})")

        return is_collaboration

    def _is_move_task(self, task: Dict[str, Any]) -> bool:
        """Ê£ÄÊü•ÊòØÂê¶ÊòØÊê¨Ëøê‰ªªÂä° - Âü∫‰∫évalidation_checks‰∏≠ÁöÑlocation_idÂà§Êñ≠"""
        validation_checks = task.get('validation_checks', [])

        for check in validation_checks:
            if isinstance(check, dict) and 'location_id' in check:
                return True

        return False

    def _extract_task_objects(self, task: Dict[str, Any], scene_objects: Dict[str, Any]) -> List[str]:
        """‰ªé‰ªªÂä°‰∏≠ÊèêÂèñÈúÄË¶ÅÁßªÂä®ÁöÑÂØπË±°IDÔºàÂè™ÂåÖÂê´location_idÂèëÁîüÊîπÂèòÁöÑÁâ©‰ΩìÔºâ"""
        moving_objects = []

        # Âè™‰ªévalidation_checks‰∏≠ÊèêÂèñÈúÄË¶ÅÁßªÂä®ÁöÑÂØπË±°ID
        validation_checks = task.get('validation_checks', [])
        for check in validation_checks:
            if isinstance(check, dict) and 'id' in check:
                obj_id = check['id']
                # Âè™ÊúâÂΩìÊ£ÄÊü•ÂåÖÂê´location_idÊó∂ÔºåÊâçËÆ§‰∏∫ËØ•Áâ©‰ΩìÈúÄË¶ÅÁßªÂä®
                if 'location_id' in check and obj_id in scene_objects:
                    moving_objects.append(obj_id)

        # ‰∏çÂÜç‰ªé‰ªªÂä°ÊèèËø∞‰∏≠ÊèêÂèñÂØπË±°IDÔºåÈÅøÂÖçÂåÖÂê´ÁõÆÊ†á‰ΩçÁΩÆÁ≠â‰∏çÁõ∏ÂÖ≥Áâ©‰Ωì
        return moving_objects

    def _check_physical_constraints(self, task_objects: List[str], scene_objects: Dict[str, Any],
                                  agents_config: List[Dict[str, Any]] = None, task: Dict[str, Any] = None) -> List[str]:
        """Ê£ÄÊü•Áâ©ÁêÜÁ∫¶ÊùüËøùÂèç - Âè™Ê£ÄÊü•ÈáçÈáèÔºåÂøΩÁï•Â∞∫ÂØ∏"""
        violations = []

        # Ëé∑ÂèñÊô∫ËÉΩ‰ΩìÈÖçÁΩÆÔºà‰ªé‰∏ä‰∏ãÊñáËé∑ÂèñÊàñ‰ΩøÁî®ÈªòËÆ§ÂÄºÔºâ
        if not agents_config:
            agents_config = self._get_agents_config_from_context()

        # Âà§Êñ≠‰ªªÂä°Á±ªÂûãÂπ∂ËÆ°ÁÆóÊâøÈáçËÉΩÂäõÔºà‰∏é‰øÆÂ§çÈò∂ÊÆµ‰øùÊåÅ‰∏ÄËá¥Ôºâ
        if task:
            is_collaboration = self._is_collaboration_task(task)
            task_desc = task.get('task_description', 'Unknown task')
        else:
            is_collaboration = False
            task_desc = 'Unknown task'

        if is_collaboration:
            # Â§öÊô∫ËÉΩ‰ΩìÂçè‰ΩúÔºö‰ΩøÁî®ÊúÄÂº∫ÁöÑ‰∏§‰∏™Êô∫ËÉΩ‰ΩìÊâøÈáç‰πãÂíå
            max_capacity = self._calculate_max_combined_weight(agents_config)
            task_type = "collaboration"
        else:
            # ÂçïÊô∫ËÉΩ‰ΩìÔºö‰ΩøÁî®Âçï‰∏™Êô∫ËÉΩ‰ΩìÁöÑÊâøÈáçËÉΩÂäõ
            max_capacity = max(agent.get('max_weight', 50.0) for agent in agents_config) if agents_config else 50.0
            task_type = "single-agent"

        self.logger.debug(f"üîç Physical constraint check for task: '{task_desc}'")
        self.logger.debug(f"   Task type: {task_type}")
        self.logger.debug(f"   Max capacity: {max_capacity}kg")
        self.logger.debug(f"   Objects to check: {task_objects}")

        for obj_id in task_objects:
            if obj_id in scene_objects:
                obj = scene_objects[obj_id]
                properties = obj.get('properties', {})

                # Ê£ÄÊü•ÈáçÈáèÁ∫¶Êùü - ‰ΩøÁî®Âä®ÊÄÅËÆ°ÁÆóÁöÑÊâøÈáçËÉΩÂäõ
                weight = properties.get('weight', 0)
                self.logger.debug(f"   Object {obj_id}: weight={weight}kg, limit={max_capacity}kg")

                if weight > max_capacity:
                    violation_msg = f"Object {obj_id} weight {weight}kg exceeds max capacity"
                    violations.append(violation_msg)
                    self.logger.warning(f"   ‚ùå {violation_msg}")
                else:
                    self.logger.debug(f"   ‚úÖ Object {obj_id} weight within limits")
            else:
                self.logger.warning(f"   ‚ö†Ô∏è  Object {obj_id} not found in scene")

                # Âà†Èô§Â∞∫ÂØ∏Á∫¶ÊùüÊ£ÄÊü• - ÂÆåÂÖ®ÂøΩÁï•sizeÁõ∏ÂÖ≥È™åËØÅ

        return violations




    def _find_best_matching_action(self, attr_name: str, task_description: str,
                                  scene_abilities: List[str]) -> Optional[str]:
        """
        Find the best matching action for an attribute in the task description.

        È™åËØÅÈÄªËæëÔºö
        1. ÈÅçÂéÜÂú∫ÊôØ‰∏≠ÁöÑÊâÄÊúâÊîØÊåÅÁöÑËÉΩÂäõÔºåÂú®‰ªªÂä°ÊèèËø∞‰∏≠Êü•ÁúãÊòØÂê¶ËÉΩÂåπÈÖçÊàêÂäü
        2. ÂØπ‰∫éÂåπÈÖçÂà∞ÁöÑÂä®‰ΩúÔºåÂ∑≤Áü•Âä®‰ΩúÂêçÂ≠óÔºåÂú®csv‰∏≠ÊâæÂà∞ÂØπÂ∫îÁöÑÂ±ûÊÄßÂíåÂ±ûÊÄßÂÄº
        3. ‰øÆÂ§çÂ±ûÊÄßÂÄºÊàñ‰øùÊåÅ‰∏çÂèò
        4. Â¶ÇÊûú‰ª•‰∏ä‰ªª‰ΩïÊ≠•È™§Â§±Ë¥• ‚Üí Âà†Èô§‰ªªÂä°
        """
        description_lower = task_description.lower()
        action_scores = []

        # Step 1: ÈÅçÂéÜÂú∫ÊôØ‰∏≠ÁöÑÊâÄÊúâÊîØÊåÅÁöÑËÉΩÂäõÔºåÂú®‰ªªÂä°ÊèèËø∞‰∏≠Êü•ÁúãÊòØÂê¶ËÉΩÂåπÈÖçÊàêÂäü
        for ability in scene_abilities:
            score = self._score_action_match(ability, description_lower)
            if score > 0:
                # ÊâæÂà∞ÂåπÈÖçÁöÑÂä®‰ΩúÔºåÊ£ÄÊü•ÊòØÂê¶‰∏éÂ±ûÊÄßÁõ∏ÂÖ≥
                if self._could_action_relate_to_attribute(ability, attr_name):
                    action_scores.append((ability, score))

        # ËøîÂõûÂæóÂàÜÊúÄÈ´òÁöÑÂä®‰Ωú
        if action_scores:
            action_scores.sort(key=lambda x: x[1], reverse=True)
            return action_scores[0][0]

        return None

    def _score_action_match(self, action_name: str, description_lower: str) -> int:
        """
        Score how well an action matches the description.

        For actions with underscores (e.g., 'turn_on', 'stop_playback'):
        - Split by underscore and check if ALL parts are present in description
        - Only match if every part is found
        """
        action_lower = action_name.lower()
        score = 0

        # Direct match (highest score)
        if action_lower in description_lower:
            score = 100

        # Handle underscore to space conversion
        elif action_lower.replace('_', ' ') in description_lower:
            score = 90

        # Handle compound actions with underscores - ALL parts must be present
        elif '_' in action_lower:
            action_parts = action_lower.split('_')
            if all(part in description_lower for part in action_parts):
                score = 80 + len(action_parts) * 5  # Bonus for more specific compound actions

        return score

    def _could_action_relate_to_attribute(self, action_name: str, attr_name: str) -> bool:
        """
        Check if an action could reasonably relate to an attribute by looking up CSV.

        Since CSV contains action_name and attribute pairs, we use CSV as the source of truth
        for attribute-action relationships instead of hardcoded mappings.
        """
        if self.attribute_actions_df is None:
            return False

        # Check if this action-attribute pair exists in CSV
        matching_rows = self.attribute_actions_df[
            (self.attribute_actions_df['action_name'] == action_name) &
            (self.attribute_actions_df['attribute'] == attr_name)
        ]

        return not matching_rows.empty



    def _apply_single_task_fixes(self, task: Dict[str, Any], task_index: int,
                                scene_objects: Dict[str, Any], scene_rooms: Dict[str, Any],
                                scene_abilities: List[str], scene_data: Dict[str, Any] = None,
                                scene_id: str = None) -> List[str]:
        """Apply fixes to a single task."""
        fixes = []

        # Fix missing required fields
        required_fields = ['task_description', 'task_category', 'validation_checks']
        for field in required_fields:
            if field not in task:
                if field == 'validation_checks':
                    task[field] = []
                    fixes.append(f"Task {task_index}: Added empty validation_checks")

        # Note: Invalid task_category is handled in _should_remove_task - no fixing attempted

        # Fix validation_checks
        if 'validation_checks' in task and isinstance(task['validation_checks'], list):
            for j, check in enumerate(task['validation_checks']):
                if isinstance(check, dict):
                    check_fixes = self._apply_validation_check_fixes(
                        check, task_index, j, task.get('task_description', ''),
                        scene_objects, scene_rooms, scene_abilities
                    )
                    fixes.extend(check_fixes)

        # Fix physical constraints (Êñ∞Â¢û) - Âè™ÂØπÊê¨Ëøê‰ªªÂä°ËøõË°å‰øÆÂ§ç
        if self._is_move_task(task):
            physical_fixes = self._apply_physical_constraint_fixes(
                task, task_index, scene_objects, scene_data, scene_id
            )
            fixes.extend(physical_fixes)

        return fixes

    def _apply_validation_check_fixes(self, check: Dict[str, Any], task_index: int, check_index: int,
                                     task_description: str, scene_objects: Dict[str, Any],
                                     scene_rooms: Dict[str, Any], scene_abilities: List[str]) -> List[str]:
        """Apply fixes to a single validation check."""
        fixes = []

        # Fix nested properties
        if 'properties' in check:
            properties = check.pop('properties')
            if isinstance(properties, dict):
                check.update(properties)
                fixes.append(f"Task {task_index} check {check_index}: Removed nested 'properties' and moved contents up")

        # Fix location_id if present
        if 'location_id' in check:
            location_fixes = self._apply_location_id_fixes(
                check, task_index, check_index, task_description, scene_objects, scene_rooms
            )
            fixes.extend(location_fixes)

        # Fix other attributes using CSV
        for attr_name, attr_value in list(check.items()):
            if attr_name not in ['id', 'location_id']:
                attr_fixes = self._apply_attribute_fixes(
                    attr_name, attr_value, task_index, check_index, task_description,
                    scene_abilities, check
                )
                fixes.extend(attr_fixes)

        return fixes

    def _apply_location_id_fixes(self, check: Dict[str, Any], task_index: int, check_index: int,
                                task_description: str, scene_objects: Dict[str, Any],
                                scene_rooms: Dict[str, Any]) -> List[str]:
        """Apply fixes to location_id - checks both missing and incorrect prefixes."""
        fixes = []
        location_id = check.get('location_id', '')

        if not location_id:
            return fixes

        # Analyze task description for spatial prepositions
        description_lower = task_description.lower()
        has_in = ' in ' in description_lower or description_lower.startswith('in ')
        has_on = ' on ' in description_lower or description_lower.startswith('on ')

        # Determine correct prefix based on task description
        if has_in and has_on:
            correct_prefix = ":"  # Both present, use empty prefix
        elif has_in:
            correct_prefix = "in:"
        elif has_on:
            correct_prefix = "on:"
        else:
            correct_prefix = ":"  # Neither present, use empty prefix

        # Extract base location (remove existing prefix if any)
        if location_id.startswith(('in:', 'on:', ':')):
            base_location = location_id.split(':', 1)[1] if ':' in location_id else location_id
        else:
            base_location = location_id

        # Construct correct location_id
        correct_location_id = f"{correct_prefix}{base_location}"

        # Apply fix if current location_id is incorrect
        if location_id != correct_location_id:
            check['location_id'] = correct_location_id
            if correct_prefix == ":":
                fixes.append(f"Task {task_index} check {check_index}: Fixed location_id from '{location_id}' to '{correct_location_id}' (empty prefix - no spatial preposition found)")
            elif correct_prefix == "in:":
                fixes.append(f"Task {task_index} check {check_index}: Fixed location_id from '{location_id}' to '{correct_location_id}' (in: prefix)")
            elif correct_prefix == "on:":
                fixes.append(f"Task {task_index} check {check_index}: Fixed location_id from '{location_id}' to '{correct_location_id}' (on: prefix)")

        return fixes

    def _apply_attribute_fixes(self, attr_name: str, attr_value: Any, task_index: int,
                              check_index: int, task_description: str, scene_abilities: List[str],
                              check: Dict[str, Any]) -> List[str]:
        """
        ‰∏•Ê†ºÊåâÁÖßÁ¨¨‰∏âÊ≠•Â±ûÊÄßÈ™åËØÅÂíå‰øÆÂ§çÈÄªËæëÔºö

        ÊÉÖÂÜµBÔºöÂ¶ÇÊûúÊòØÂÖ∂‰ªñÂ±ûÊÄßÂ≠óÊÆµ
        - È¶ñÂÖàÁ°ÆÂÆö‰ªªÂä°ÂØπÂ∫îÁöÑÂä®‰ΩúÔºö
          - ËØªÂèñ‰ªªÂä°ÂØπÂ∫îÂú∫ÊôØJSONÊñá‰ª∂‰∏≠ÁöÑabilitiesÂ≠óÊÆµ
          - ÈÄê‰∏™Ê£ÄÊü•ÊØè‰∏™abilityÊòØÂê¶Âá∫Áé∞Âú®‰ªªÂä°ÊèèËø∞(task_description)‰∏≠
          - ÂØπ‰∫éÂåÖÂê´‰∏ãÂàíÁ∫øÁöÑabilityÔºàÂ¶Ç"turn_on"ÔºâÔºåÈúÄË¶ÅÂ∞ÜÂÖ∂ÂàÜÂâ≤ÂêéÊ£ÄÊü•ÊâÄÊúâÈÉ®ÂàÜÊòØÂê¶ÈÉΩÂú®‰ªªÂä°ÊèèËø∞‰∏≠Âá∫Áé∞
          - Â¶ÇÊûúÊâÄÊúâabilitiesÈÉΩÊó†Ê≥ïÂåπÈÖç‰ªªÂä°ÊèèËø∞ÔºåÂà†Èô§Êï¥‰∏™‰ªªÂä°
        - ÊâæÂà∞ÂåπÈÖçÁöÑÂä®‰ΩúÂêéÔºö
          - Âú®CSVÊñá‰ª∂‰∏≠Êü•ËØ¢ËØ•Âä®‰ΩúÂêçÂØπÂ∫îÁöÑÊ†áÂáÜÂ±ûÊÄßÂêçÂíåÂ±ûÊÄßÂÄº
          - ÂØπÊØîÂéüÂßãÈîÆÂÄºÂØπ‰∏éCSV‰∏≠ÁöÑÊ†áÂáÜÊ†ºÂºè
          - ‰øÆÊ≠£Â±ûÊÄßÂêç‰∏∫CSV‰∏≠ÂØπÂ∫îÁöÑÊ†áÂáÜÂ±ûÊÄßÂêç
          - ‰øÆÊ≠£Â±ûÊÄßÂÄº‰∏∫CSV‰∏≠ÂèñÂÄºÁöÑÈÄªËæëÂèñÂèçÂÄº
          - ËÆ∞ÂΩïÊâÄÊúâ‰øÆÊîπËØ¶ÊÉÖ
        """
        fixes = []

        self.logger.debug(f"Task {task_index} check {check_index}: Processing attribute '{attr_name}' with value '{attr_value}'")

        # È¶ñÂÖàÁ°ÆÂÆö‰ªªÂä°ÂØπÂ∫îÁöÑÂä®‰ΩúÔºöÈÄê‰∏™Ê£ÄÊü•ÊØè‰∏™abilityÊòØÂê¶Âá∫Áé∞Âú®‰ªªÂä°ÊèèËø∞‰∏≠
        matched_action = None
        for ability in scene_abilities:
            if self._ability_matches_task_description(ability, task_description):
                self.logger.debug(f"Task {task_index} check {check_index}: Found matching ability '{ability}' in task description")
                matched_action = ability
                break

        if not matched_action:
            # Â¶ÇÊûúÊâÄÊúâabilitiesÈÉΩÊó†Ê≥ïÂåπÈÖç‰ªªÂä°ÊèèËø∞ÔºåËøô‰∏™‰ªªÂä°Â∫îËØ•Âú®_should_remove_task‰∏≠Ë¢´Âà†Èô§
            # ËøôÈáå‰∏çÂ∫îËØ•Âà∞ËææÔºå‰ΩÜ‰∏∫‰∫ÜÂÆâÂÖ®Ëµ∑ËßÅËÆ∞ÂΩïË≠¶Âëä
            self.logger.warning(f"Task {task_index} check {check_index}: No matching ability found for attribute '{attr_name}'")
            return fixes

        # ÊâæÂà∞ÂåπÈÖçÁöÑÂä®‰ΩúÂêéÔºöÂú®CSVÊñá‰ª∂‰∏≠Êü•ËØ¢ËØ•Âä®‰ΩúÂêçÂØπÂ∫îÁöÑÊ†áÂáÜÂ±ûÊÄßÂêçÂíåÂ±ûÊÄßÂÄº
        if self.attribute_actions_df is not None:
            # Êü•ÊâæCSV‰∏≠ËØ•Âä®‰ΩúÂØπÂ∫îÁöÑÊâÄÊúâÂ±ûÊÄß
            action_rows = self.attribute_actions_df[
                self.attribute_actions_df['action_name'] == matched_action
            ]

            if not action_rows.empty:
                # Â∞ùËØïÊâæÂà∞‰∏éÂΩìÂâçÂ±ûÊÄßÂêçÂåπÈÖçÁöÑË°å
                matching_attr_row = action_rows[action_rows['attribute'] == attr_name]

                if not matching_attr_row.empty:
                    # ÊâæÂà∞ÂÆåÂÖ®ÂåπÈÖçÁöÑÂ±ûÊÄßÂêç
                    csv_row = matching_attr_row.iloc[0]
                    expected_value = not csv_row['value']  # ‰øÆÊ≠£Â±ûÊÄßÂÄº‰∏∫CSV‰∏≠ÂèñÂÄºÁöÑÈÄªËæëÂèñÂèçÂÄº

                    if attr_value != expected_value:
                        check[attr_name] = expected_value
                        fixes.append(f"Task {task_index} check {check_index}: "
                                   f"Fixed attribute '{attr_name}' value from {attr_value} to {expected_value} "
                                   f"(matched action: {matched_action}, CSV value inverted)")
                        self.logger.info(f"Task {task_index} check {check_index}: Fixed attribute value")
                else:
                    # Â±ûÊÄßÂêç‰∏çÂåπÈÖçÔºåÂ∞ùËØï‰øÆÊ≠£Â±ûÊÄßÂêç
                    # Êü•ÊâæËØ•Âä®‰ΩúÁöÑÁ¨¨‰∏Ä‰∏™Â±ûÊÄß‰Ωú‰∏∫Ê†áÂáÜÂ±ûÊÄßÂêç
                    if len(action_rows) > 0:
                        csv_row = action_rows.iloc[0]
                        correct_attr_name = csv_row['attribute']
                        expected_value = not csv_row['value']  # ‰øÆÊ≠£Â±ûÊÄßÂÄº‰∏∫CSV‰∏≠ÂèñÂÄºÁöÑÈÄªËæëÂèñÂèçÂÄº

                        # ‰øÆÊ≠£Â±ûÊÄßÂêç‰∏∫CSV‰∏≠ÂØπÂ∫îÁöÑÊ†áÂáÜÂ±ûÊÄßÂêç
                        del check[attr_name]  # Âà†Èô§ÂéüÊúâÁöÑÈîôËØØÂ±ûÊÄßÂêç
                        check[correct_attr_name] = expected_value
                        fixes.append(f"Task {task_index} check {check_index}: "
                                   f"Fixed attribute name from '{attr_name}' to '{correct_attr_name}' "
                                   f"and set value to {expected_value} "
                                   f"(matched action: {matched_action}, CSV value inverted)")
                        self.logger.info(f"Task {task_index} check {check_index}: Fixed attribute name and value")
            else:
                self.logger.warning(f"Task {task_index} check {check_index}: No CSV data found for action '{matched_action}'")

        return fixes
    def _ability_matches_task_description(self, ability: str, task_description: str) -> bool:
        """
        Ê£ÄÊü•abilityÊòØÂê¶Âá∫Áé∞Âú®‰ªªÂä°ÊèèËø∞‰∏≠
        ÂØπ‰∫éÂåÖÂê´‰∏ãÂàíÁ∫øÁöÑabilityÔºàÂ¶Ç"turn_on"ÔºâÔºåÈúÄË¶ÅÂ∞ÜÂÖ∂ÂàÜÂâ≤ÂêéÊ£ÄÊü•ÊâÄÊúâÈÉ®ÂàÜÊòØÂê¶ÈÉΩÂú®‰ªªÂä°ÊèèËø∞‰∏≠Âá∫Áé∞
        """
        description_lower = task_description.lower()
        ability_lower = ability.lower()

        # Áõ¥Êé•ÂåπÈÖç
        if ability_lower in description_lower:
            return True

        # Â§ÑÁêÜ‰∏ãÂàíÁ∫øËΩ¨Á©∫Ê†ºÁöÑÊÉÖÂÜµ
        if ability_lower.replace('_', ' ') in description_lower:
            return True

        # ÂØπ‰∫éÂåÖÂê´‰∏ãÂàíÁ∫øÁöÑabilityÔºåÂàÜÂâ≤ÂêéÊ£ÄÊü•ÊâÄÊúâÈÉ®ÂàÜÊòØÂê¶ÈÉΩÂú®‰ªªÂä°ÊèèËø∞‰∏≠Âá∫Áé∞
        if '_' in ability_lower:
            ability_parts = ability_lower.split('_')
            if all(part in description_lower for part in ability_parts):
                return True

        return False






    def _extract_scene_objects(self, scene_data: Dict[str, Any]) -> Dict[str, Any]:
        """Extract objects from scene data."""
        objects = {}
        if 'objects' in scene_data:
            for obj in scene_data['objects']:
                if isinstance(obj, dict) and 'id' in obj:
                    objects[obj['id']] = obj
        return objects

    def _extract_scene_rooms(self, scene_data: Dict[str, Any]) -> Dict[str, Any]:
        """Extract rooms from scene data."""
        rooms = {}
        if 'rooms' in scene_data:
            for room in scene_data['rooms']:
                if isinstance(room, dict) and 'id' in room:
                    rooms[room['id']] = room
        return rooms

    def _extract_scene_abilities(self, scene_data: Dict[str, Any]) -> List[str]:
        """Extract abilities from scene data."""
        abilities = []
        if 'abilities' in scene_data:
            for ability in scene_data['abilities']:
                if isinstance(ability, dict) and 'name' in ability:
                    abilities.append(ability['name'])  # Keep original case
                elif isinstance(ability, str):
                    abilities.append(ability)  # Direct string ability
        return abilities

    def validate_task_file(self, task_file_path: str, scene_file_path: str,
                          auto_fix: bool = True, save_changes: bool = True) -> Tuple[bool, List[str], List[str]]:
        """
        Validate a task file against its corresponding scene file.

        Args:
            task_file_path: Path to the task JSON file
            scene_file_path: Path to the scene JSON file
            auto_fix: Whether to automatically fix issues
            save_changes: Whether to save changes to the file (False for testing)

        Returns:
            Tuple of (is_valid, error_messages, fixes_applied)
        """
        try:
            # Load task data
            with open(task_file_path, 'r', encoding='utf-8') as f:
                task_data = json.load(f)

            # Load scene data
            with open(scene_file_path, 'r', encoding='utf-8') as f:
                scene_data = json.load(f)

            # Validate and fix
            is_valid, errors, fixed_task_data, fixes_applied = self.validate_and_fix_task_data(
                task_data, scene_data, auto_fix
            )

            # Save fixed data if fixes were applied and save_changes is True
            if auto_fix and fixes_applied and save_changes:
                with open(task_file_path, 'w', encoding='utf-8') as f:
                    json.dump(fixed_task_data, f, ensure_ascii=False, indent=2)
                self.logger.info(f"Applied {len(fixes_applied)} fixes to {task_file_path}")

                # Save fix log
                self._save_fix_log(task_file_path, fixes_applied, errors)
            elif auto_fix and fixes_applied and not save_changes:
                self.logger.info(f"Would apply {len(fixes_applied)} fixes to {task_file_path} (test mode)")

            return is_valid, errors, fixes_applied

        except Exception as e:
            self.logger.error(f"Error validating task file {task_file_path}: {e}")
            return False, [f"File validation error: {str(e)}"], []

    def _save_fix_log(self, task_file_path: str, fixes_applied: List[str], remaining_errors: List[str]):
        """Save fix log to a log file."""
        import datetime

        # Create logs directory if it doesn't exist
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)

        # Create log filename with timestamp
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        task_filename = Path(task_file_path).stem
        log_filename = f"{task_filename}_fixes_{timestamp}.log"
        log_path = log_dir / log_filename

        # Write log
        with open(log_path, 'w', encoding='utf-8') as f:
            f.write(f"Task Validation and Fix Log\n")
            f.write(f"=" * 50 + "\n")
            f.write(f"File: {task_file_path}\n")
            f.write(f"Timestamp: {datetime.datetime.now().isoformat()}\n")
            f.write(f"Fixes Applied: {len(fixes_applied)}\n")
            f.write(f"Remaining Errors: {len(remaining_errors)}\n\n")

            if fixes_applied:
                f.write("FIXES APPLIED:\n")
                f.write("-" * 20 + "\n")
                for i, fix in enumerate(fixes_applied, 1):
                    f.write(f"{i}. {fix}\n")
                f.write("\n")

            if remaining_errors:
                f.write("REMAINING ERRORS:\n")
                f.write("-" * 20 + "\n")
                for i, error in enumerate(remaining_errors, 1):
                    f.write(f"{i}. {error}\n")
                f.write("\n")

        self.logger.info(f"Fix log saved to: {log_path}")

    def _apply_physical_constraint_fixes(self, task: Dict[str, Any], task_index: int,
                                       scene_objects: Dict[str, Any], scene_data: Dict[str, Any] = None,
                                       scene_id: str = None) -> List[str]:
        """Â∫îÁî®Áâ©ÁêÜÁ∫¶Êùü‰øÆÂ§ç - ‰øÆÊîπÁâ©‰ΩìÈáçÈáèËÄå‰∏çÊòØÊô∫ËÉΩ‰ΩìËÉΩÂäõ"""
        fixes = []
        scene_modified = False

        # Ëé∑Âèñ‰ªªÂä°‰∏≠Ê∂âÂèäÁöÑÂØπË±°
        task_objects = self._extract_task_objects(task, scene_objects)

        # Âà§Êñ≠‰ªªÂä°Á±ªÂûãÂπ∂ËÆ°ÁÆóÊâøÈáçËÉΩÂäõ
        is_collaboration = self._is_collaboration_task(task)
        task_desc = task.get('task_description', 'Unknown task')

        # Ëé∑ÂèñÊô∫ËÉΩ‰ΩìÈÖçÁΩÆÔºà‰ªé‰∏ä‰∏ãÊñáËé∑ÂèñÊàñ‰ΩøÁî®ÈªòËÆ§ÂÄºÔºâ
        agents_config = self._get_agents_config_from_context()

        if is_collaboration:
            # Â§öÊô∫ËÉΩ‰ΩìÂçè‰ΩúÔºö‰ΩøÁî®ÊúÄÂº∫ÁöÑ‰∏§‰∏™Êô∫ËÉΩ‰ΩìÊâøÈáç‰πãÂíå
            max_capacity = self._calculate_max_combined_weight(agents_config)
            task_type = "collaboration"
        else:
            # ÂçïÊô∫ËÉΩ‰ΩìÔºö‰ΩøÁî®Âçï‰∏™Êô∫ËÉΩ‰ΩìÁöÑÊâøÈáçËÉΩÂäõ
            max_capacity = max(agent.get('max_weight', 50.0) for agent in agents_config) if agents_config else 50.0
            task_type = "single-agent"

        self.logger.info(f"üîß Physical constraint fix for Task {task_index}: '{task_desc}'")
        self.logger.info(f"   Task type: {task_type}")
        self.logger.info(f"   Max capacity: {max_capacity}kg")
        self.logger.info(f"   Objects to fix: {task_objects}")

        for obj_id in task_objects:
            if obj_id in scene_objects:
                obj = scene_objects[obj_id]
                properties = obj.get('properties', {})

                # Ê£ÄÊü•Âπ∂‰øÆÂ§çÈáçÈáèÁ∫¶Êùü
                current_weight = properties.get('weight', 0)
                self.logger.debug(f"   Checking object {obj_id}: current_weight={current_weight}kg, limit={max_capacity}kg")

                if current_weight > max_capacity:
                    self.logger.info(f"   ‚ùå Object {obj_id} exceeds weight limit: {current_weight}kg > {max_capacity}kg")

                    # ‰øÆÊîπÁâ©‰ΩìÈáçÈáè‰∏∫Êô∫ËÉΩ‰ΩìÊâøÈáçËÉΩÂäõ
                    old_weight = current_weight
                    properties['weight'] = max_capacity
                    scene_modified = True

                    # ÂêåÊ≠•Êõ¥Êñ∞ scene_objects ‰∏≠ÁöÑÊï∞ÊçÆ
                    if obj_id in scene_objects:
                        scene_objects[obj_id]['properties']['weight'] = max_capacity
                        self.logger.debug(f"   üîÑ Updated scene_objects for {obj_id}: {old_weight}kg -> {max_capacity}kg")

                    fixes.append(f"Task {task_index}: Reduced object {obj_id} weight from {old_weight}kg to {max_capacity}kg ({task_type} task)")
                    self.logger.info(f"   ‚úÖ Fixed weight constraint for {obj_id}: {old_weight}kg -> {max_capacity}kg ({task_type})")
                else:
                    self.logger.debug(f"   ‚úÖ Object {obj_id} weight within limits")
            else:
                self.logger.warning(f"   ‚ö†Ô∏è  Object {obj_id} not found in scene_objects")

        # Â¶ÇÊûúÂú∫ÊôØË¢´‰øÆÊîπ‰∏îÊèê‰æõ‰∫ÜÂú∫ÊôØÊï∞ÊçÆÂíåIDÔºåÊ†áËÆ∞‰∏∫ÂæÖ‰øùÂ≠ò
        if scene_modified and scene_data and scene_id:
            self.logger.info(f"üíæ Scene modified, marking scene {scene_id} for saving")
            self._mark_scene_for_save(scene_id)
        elif scene_modified:
            self.logger.warning(f"‚ö†Ô∏è  Scene was modified but cannot save (scene_data={bool(scene_data)}, scene_id={scene_id})")

        return fixes

    def _get_agents_config_from_context(self) -> List[Dict[str, Any]]:
        """‰ªé‰∏ä‰∏ãÊñáËé∑ÂèñÊô∫ËÉΩ‰ΩìÈÖçÁΩÆÔºåÂ¶ÇÊûúÊ≤°ÊúâÂàôËøîÂõûÈªòËÆ§ÈÖçÁΩÆ"""
        agents_config = getattr(self, '_current_agents_config', None)
        if not agents_config:
            # ËøîÂõûÈªòËÆ§ÁöÑÂèåÊô∫ËÉΩ‰ΩìÈÖçÁΩÆ
            return [
                {"name": "robot_1", "max_grasp_limit": 1, "max_weight": 50.0},
                {"name": "robot_2", "max_grasp_limit": 1, "max_weight": 50.0}
            ]
        return agents_config

    def _calculate_max_combined_weight(self, agents_config: List[Dict[str, Any]]) -> float:
        """ËÆ°ÁÆóÊô∫ËÉΩ‰ΩìÁªÑÂêàÁöÑÊúÄÂ§ßÊâøÈáçËÉΩÂäõ"""
        if not agents_config:
            return 100.0  # ÈªòËÆ§ÂÄº

        # ÊâæÂà∞ÊâøÈáçËÉΩÂäõÊúÄÈ´òÁöÑ‰∏§‰∏™Êô∫ËÉΩ‰Ωì
        weights = [agent.get('max_weight', 50.0) for agent in agents_config]
        weights.sort(reverse=True)

        # ËøîÂõûÊúÄÈ´òÁöÑ‰∏§‰∏™Êô∫ËÉΩ‰ΩìÁöÑÊâøÈáçÂíå
        return weights[0] + (weights[1] if len(weights) > 1 else 0)

    # Âà†Èô§ _calculate_max_combined_size ÊñπÊ≥ïÔºå‰∏çÂÜçÈúÄË¶ÅÂ∞∫ÂØ∏ËÆ°ÁÆó

    # Âà†Èô§ _apply_agents_config_fixes_for_task ÊñπÊ≥ï
    # Êñ∞ÁöÑ‰øÆÂ§çÁ≠ñÁï•ÊòØ‰øÆÊîπÁâ©‰ΩìÈáçÈáèËÄå‰∏çÊòØÊô∫ËÉΩ‰ΩìËÉΩÂäõ

    def _check_initial_vs_target_state(self, task: Dict[str, Any], task_index: int,
                                      scene_objects: Dict[str, Any], scene_rooms: Dict[str, Any]) -> Tuple[bool, str]:
        """
        Ê£ÄÊü•‰ªªÂä°ÁöÑÁõÆÊ†áÁä∂ÊÄÅÊòØÂê¶‰∏éÂú∫ÊôØÁöÑÂàùÂßãÁä∂ÊÄÅÁõ∏Âêå

        Â¶ÇÊûúÁõÆÊ†áÁä∂ÊÄÅ‰∏éÂàùÂßãÁä∂ÊÄÅÁõ∏ÂêåÔºåËØ¥Êòé‰ªªÂä°Â∑≤ÁªèÂÆåÊàêÊàñÊó†ÊÑè‰πâÔºåÂ∫îËØ•Ë¢´Âà†Èô§

        Args:
            task: ‰ªªÂä°Êï∞ÊçÆ
            task_index: ‰ªªÂä°Á¥¢Âºï
            scene_objects: Âú∫ÊôØÂØπË±°Â≠óÂÖ∏
            scene_rooms: Âú∫ÊôØÊàøÈó¥Â≠óÂÖ∏

        Returns:
            Tuple of (should_remove, reason)
        """
        validation_checks = task.get('validation_checks', [])

        for check_index, check in enumerate(validation_checks):
            if not isinstance(check, dict):
                continue

            object_id = check.get('id')
            if not object_id:
                continue

            # Ëé∑ÂèñÂú∫ÊôØ‰∏≠ÁöÑÂØπË±°ÊàñÊàøÈó¥
            scene_entity = None
            if object_id in scene_objects:
                scene_entity = scene_objects[object_id]
            elif object_id in scene_rooms:
                scene_entity = scene_rooms[object_id]
            else:
                # ÂØπË±°‰∏çÂ≠òÂú®ÔºåËøô‰∏™ÈóÆÈ¢ò‰ºöÂú®Á¨¨‰∫åÊ≠•È™åËØÅ‰∏≠Ë¢´ÊçïËé∑
                continue

            # Ê£ÄÊü•‰ΩçÁΩÆÊòØÂê¶Áõ∏Âêå
            if 'location_id' in check:
                current_location = scene_entity.get('location_id', '')
                target_location = check['location_id']

                # Ê†áÂáÜÂåñ‰ΩçÁΩÆIDËøõË°åÊØîËæÉ
                normalized_current = self._normalize_location_id(current_location)
                normalized_target = self._normalize_location_id(target_location)

                if normalized_current == normalized_target:
                    self.logger.debug(f"Task {task_index}: Object {object_id} already at target location '{target_location}'")
                    return True, f"Object {object_id} already at target location (current: '{current_location}', target: '{target_location}')"

            # Ê£ÄÊü•Áä∂ÊÄÅÂ±ûÊÄßÊòØÂê¶Áõ∏Âêå
            scene_states = scene_entity.get('states', {})
            for attr_name, target_value in check.items():
                if attr_name in ['id', 'location_id']:
                    continue

                if attr_name.startswith('is_'):
                    current_value = scene_states.get(attr_name)
                    if current_value == target_value:
                        self.logger.debug(f"Task {task_index}: Object {object_id} already has target state {attr_name}={target_value}")
                        return True, f"Object {object_id} already has target state {attr_name}={target_value}"

        return False, ""

    def _normalize_location_id(self, location_id: str) -> str:
        """
        Ê†áÂáÜÂåñlocation_id‰ª•‰æøÊØîËæÉ

        ÁßªÈô§ÂâçÁºÄÂπ∂ËøîÂõûÂü∫Á°Ä‰ΩçÁΩÆID

        Args:
            location_id: ÂéüÂßã‰ΩçÁΩÆID

        Returns:
            Ê†áÂáÜÂåñÁöÑ‰ΩçÁΩÆID
        """
        if not location_id:
            return ""

        # ÁßªÈô§ÂâçÁºÄ (in:, on:, :)
        if location_id.startswith(('in:', 'on:', ':')):
            if ':' in location_id:
                return location_id.split(':', 1)[1]

        return location_id
