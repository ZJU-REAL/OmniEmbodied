"""
ÂèØËßÜÂåñWebÊúçÂä°Âô®Ê®°Âùó
Êèê‰æõHTTP APIÂíåWebSocketÊé•Âè£Áî®‰∫éÂÆûÊó∂Êï∞ÊçÆ‰º†Ëæì
"""

import json
import threading
import webbrowser
from http.server import HTTPServer, SimpleHTTPRequestHandler
from socketserver import ThreadingMixIn
from urllib.parse import urlparse
import os
from typing import Dict, Any, Optional
import logging


class VisualizationRequestHandler(SimpleHTTPRequestHandler):
    """Ëá™ÂÆö‰πâHTTPËØ∑Ê±ÇÂ§ÑÁêÜÂô®"""

    def __init__(self, *args, data_provider=None, config=None, **kwargs):
        self.data_provider = data_provider
        self.config = config or {}
        super().__init__(*args, **kwargs)

    def log_message(self, format, *args):
        """ÈáçÂÜôÊó•ÂøóÊñπÊ≥ï‰ª•Á¶ÅÁî®HTTPËØ∑Ê±ÇÊó•Âøó"""
        # ‰∏çËæìÂá∫‰ªª‰ΩïÊó•ÂøóÔºåÂÆåÂÖ®ÈùôÈªò
        pass
    
    def do_GET(self):
        """Â§ÑÁêÜGETËØ∑Ê±Ç"""
        parsed_path = urlparse(self.path)
        path = parsed_path.path
        
        # APIË∑ØÁî±
        if path.startswith('/api/'):
            self._handle_api_request(path, parsed_path.query)
        elif path == '/' or path == '/index.html':
            self._serve_index_page()

        elif path.endswith('.js') or path.endswith('.css') or path.endswith('.html'):
            self._serve_static_file(path)
        else:
            self.send_error(404, "File not found")
    
    def _handle_api_request(self, path: str, query: str):
        """Â§ÑÁêÜAPIËØ∑Ê±Ç"""
        try:
            if path == '/api/data':
                # Ëé∑ÂèñÂÆåÊï¥Êï∞ÊçÆ
                data = self.data_provider.get_complete_visualization_data()
                self._send_json_response(data)
            elif path == '/api/rooms':
                # Ëé∑ÂèñÊàøÈó¥ÂàóË°®
                data = self.data_provider.get_complete_visualization_data()
                self._send_json_response(data.get('rooms', []))
            elif path.startswith('/api/room/'):
                # Ëé∑ÂèñÁâπÂÆöÊàøÈó¥Êï∞ÊçÆ
                room_id = path.split('/')[-1]
                data = self.data_provider.get_room_layout_data(room_id)
                self._send_json_response(data)
            elif path == '/api/agents':
                # Ëé∑ÂèñÊô∫ËÉΩ‰ΩìÊï∞ÊçÆ
                data = self.data_provider.get_complete_visualization_data()
                self._send_json_response(data.get('agents', []))
            elif path == '/api/objects':
                # Ëé∑ÂèñÁâ©‰ΩìÊï∞ÊçÆ
                data = self.data_provider.get_complete_visualization_data()
                self._send_json_response(data.get('objects', []))
            elif path == '/api/config':
                # Ëé∑ÂèñÈÖçÁΩÆ‰ø°ÊÅØ
                self._send_json_response(self.config)
            else:
                self.send_error(404, "API endpoint not found")
        except Exception as e:
            logging.error(f"APIËØ∑Ê±ÇÂ§ÑÁêÜÈîôËØØ: {e}")
            self.send_error(500, f"Internal server error: {str(e)}")
    
    def _send_json_response(self, data: Any):
        """ÂèëÈÄÅJSONÂìçÂ∫î"""
        response = json.dumps(data, ensure_ascii=False, indent=2)
        self.send_response(200)
        self.send_header('Content-Type', 'application/json; charset=utf-8')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Content-Length', str(len(response.encode('utf-8'))))
        self.end_headers()
        self.wfile.write(response.encode('utf-8'))
    
    def _serve_index_page(self):
        """Êèê‰æõ‰∏ªÈ°µ"""
        html_content = self._generate_index_html()
        self.send_response(200)
        self.send_header('Content-Type', 'text/html; charset=utf-8')
        self.send_header('Content-Length', str(len(html_content.encode('utf-8'))))
        self.end_headers()
        self.wfile.write(html_content.encode('utf-8'))
    
    def _serve_static_file(self, path: str):
        """Êèê‰æõÈùôÊÄÅÊñá‰ª∂"""
        try:
            # Ëé∑ÂèñÂΩìÂâçÊñá‰ª∂ÁöÑÁõÆÂΩï
            current_dir = os.path.dirname(os.path.abspath(__file__))
            static_dir = os.path.join(current_dir, 'static')

            # ÊûÑÂª∫Êñá‰ª∂Ë∑ØÂæÑ - ÁßªÈô§/static/ÂâçÁºÄ
            filename = path.replace('/static/', '').lstrip('/')
            file_path = os.path.join(static_dir, filename)

            # Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
            if not os.path.exists(file_path) or not os.path.isfile(file_path):
                self.send_error(404, "Static file not found")
                return

            # Á°ÆÂÆöÂÜÖÂÆπÁ±ªÂûã
            if path.endswith('.js'):
                content_type = 'application/javascript; charset=utf-8'
            elif path.endswith('.css'):
                content_type = 'text/css; charset=utf-8'
            elif path.endswith('.html'):
                content_type = 'text/html; charset=utf-8'
            else:
                content_type = 'text/plain; charset=utf-8'

            # ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # ÂèëÈÄÅÂìçÂ∫î
            self.send_response(200)
            self.send_header('Content-Type', content_type)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(content.encode('utf-8'))))
            self.end_headers()
            self.wfile.write(content.encode('utf-8'))

        except Exception as e:
            logging.error(f"Êèê‰æõÈùôÊÄÅÊñá‰ª∂Â§±Ë¥• {path}: {e}")
            self.send_error(500, f"Internal server error: {str(e)}")


    
    def _generate_index_html(self) -> str:
        """ÁîüÊàê‰∏ªÈ°µHTML"""
        return """<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ê®°ÊãüÂô®ÂèØËßÜÂåñ</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ü§ñ</text></svg>">
    <style>
        * { box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; background: #f5f5f5; }
        .container { display: flex; height: 100vh; }
        .sidebar { width: 380px; background: white; border-right: 1px solid #e0e0e0; display: flex; flex-direction: column; overflow: hidden; }
        .main-view { flex: 1; display: flex; flex-direction: column; }
        .header { background: white; padding: 15px 20px; border-bottom: 1px solid #e0e0e0; flex-shrink: 0; }
        .header h1 { margin: 0; font-size: 24px; color: #333; }
        .status { margin-top: 8px; font-size: 14px; color: #666; }
        .sidebar-content { flex: 1; overflow-y: auto; padding: 0; }
        .info-panel { border-bottom: 1px solid #e0e0e0; }
        .panel-header { padding: 12px 20px; background: #f8f9fa; cursor: pointer; display: flex; justify-content: space-between; align-items: center; user-select: none; }

        .panel-header h3 { margin: 0; font-size: 14px; color: #333; font-weight: 600; }
        .toggle-icon { font-size: 12px; color: #666; transition: transform 0.2s ease; }
        .info-panel.collapsed .toggle-icon { transform: rotate(-90deg); }
        .info-panel.collapsed .panel-content { display: none; }
        .panel-content { padding: 15px 20px; }
        .room-item, .agent-item, .object-item {
            padding: 12px; margin: 8px 0; background: #f8f9fa; border-radius: 6px; cursor: pointer;
            border-left: 4px solid transparent; transition: all 0.2s ease;
        }

        .room-item.selected { background: #e3f2fd; border-left-color: #2196f3; }
        .item-title { font-weight: 600; color: #333; margin-bottom: 4px; }
        .item-details { font-size: 12px; color: #666; }
        .visualization-container { flex: 1; position: relative; background: white; }
        .canvas-container { position: relative; width: 100%; height: 100%; }
        .canvas-controls { position: absolute; top: 10px; right: 10px; z-index: 10; }
        .control-btn {
            background: rgba(255,255,255,0.9); border: 1px solid #ddd; border-radius: 4px;
            padding: 8px 12px; margin-left: 5px; cursor: pointer; font-size: 12px;
        }

        #visualizationCanvas { display: block; width: 100%; height: 100%; }
        .loading { text-align: center; padding: 50px; color: #666; }
        .error { color: #d32f2f; padding: 10px; background: #ffebee; border-radius: 4px; margin: 10px 0; }

        .legend { position: absolute; bottom: 10px; left: 10px; background: rgba(255,255,255,0.95);
                 padding: 15px; border-radius: 6px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); font-size: 13px; }
        .legend-item { display: flex; align-items: center; margin: 6px 0; font-size: 12px; }
        .legend-color { width: 18px; height: 18px; margin-right: 10px; border-radius: 3px; }
        .object-details-panel { max-height: 400px; overflow-y: auto; }
        .object-hierarchy { margin-left: 15px; border-left: 2px solid #e0e0e0; padding-left: 10px; }
        .clickable-item { cursor: pointer; transition: background-color 0.2s ease; }




        /* Êô∫ËÉΩ‰ΩìÁä∂ÊÄÅÂç°ÁâáÊ†∑Âºè */
        .agent-status-card {
            background: #f8f9fa;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 12px;
            margin: 8px 0;
            transition: all 0.2s ease;
            cursor: pointer;
        }

        .agent-status-card.selected {
            background: #e8f5e8;
            border-color: #4caf50;
            box-shadow: 0 2px 8px rgba(76, 175, 80, 0.2);
        }
        .agent-name {
            font-weight: 600;
            color: #333;
            margin-bottom: 6px;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        .agent-location {
            font-size: 11px;
            color: #666;
            margin-bottom: 8px;
        }
        .agent-inventory {
            font-size: 11px;
            color: #333;
            margin-bottom: 6px;
        }
        .agent-abilities {
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
            margin-top: 6px;
        }
        .ability-tag {
            background: #e3f2fd;
            color: #1976d2;
            padding: 2px 6px;
            border-radius: 12px;
            font-size: 10px;
            font-weight: 500;
        }
        .inventory-item {
            background: #fff3e0;
            color: #f57c00;
            padding: 2px 6px;
            border-radius: 12px;
            font-size: 10px;
            margin-right: 4px;
            display: inline-block;
        }
        .inventory-item.tool {
            background: #ffcc80;
            color: #e65100;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="sidebar">
            <div class="header">
                <h1>ü§ñ Ê®°ÊãüÂô®ÂèØËßÜÂåñ</h1>
                <div class="status" id="status">Ê≠£Âú®ËøûÊé•...</div>
            </div>
            <div class="sidebar-content">
                <!-- 1. ‰ªªÂä°‰ø°ÊÅØÈù¢Êùø -->
                <div class="info-panel">
                    <div class="panel-header" onclick="togglePanel(this)">
                        <h3>üìã ‰ªªÂä°‰ø°ÊÅØ</h3>
                        <span class="toggle-icon">‚ñº</span>
                    </div>
                    <div class="panel-content">
                        <div id="taskInfo" style="margin-bottom: 15px;">
                            <h4 style="margin: 0 0 8px 0; font-size: 13px; color: #666; border-bottom: 1px solid #e0e0e0; padding-bottom: 4px;">ÊâÄÊúâ‰ªªÂä°</h4>
                            <div id="allTasksList" style="font-size: 12px; max-height: 300px; overflow-y: auto;">Âä†ËΩΩ‰∏≠...</div>
                        </div>

                        <div id="actionInfo">
                            <h4 style="margin: 0 0 8px 0; font-size: 13px; color: #666; border-bottom: 1px solid #e0e0e0; padding-bottom: 4px;">ÊîØÊåÅÁöÑÂä®‰Ωú</h4>
                            <div id="supportedActions" style="font-size: 11px; max-height: 150px; overflow-y: auto;">Âä†ËΩΩ‰∏≠...</div>
                        </div>
                    </div>
                </div>

                <!-- 2. Êô∫ËÉΩ‰Ωì‰ø°ÊÅØÈù¢Êùø -->
                <div class="info-panel">
                    <div class="panel-header" onclick="togglePanel(this)">
                        <h3>ü§ñ Êô∫ËÉΩ‰Ωì‰ø°ÊÅØ</h3>
                        <span class="toggle-icon">‚ñº</span>
                    </div>
                    <div class="panel-content">
                        <div id="agentStatusSection">
                            <div id="agentStatusList" style="max-height: 300px; overflow-y: auto;">
                                <div class="loading">Âä†ËΩΩ‰∏≠...</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 3. ÁéØÂ¢É‰ø°ÊÅØÈù¢Êùø -->
                <div class="info-panel">
                    <div class="panel-header" onclick="togglePanel(this)">
                        <h3>üåç ÁéØÂ¢É‰ø°ÊÅØ</h3>
                        <span class="toggle-icon">‚ñº</span>
                    </div>
                    <div class="panel-content">
                        <div id="environmentOverview" style="margin-bottom: 15px;">
                            <h4 style="margin: 0 0 8px 0; font-size: 13px; color: #666; border-bottom: 1px solid #e0e0e0; padding-bottom: 4px;">ÁéØÂ¢ÉÊ¶ÇËßà</h4>
                            <div id="environmentStats" style="font-size: 12px; color: #333; margin-bottom: 12px;">Âä†ËΩΩ‰∏≠...</div>
                        </div>

                        <div id="roomsSection" style="margin-bottom: 15px;">
                            <h4 style="margin: 0 0 8px 0; font-size: 13px; color: #666; border-bottom: 1px solid #e0e0e0; padding-bottom: 4px;">ÊàøÈó¥ÂàóË°®</h4>
                            <div id="roomList" style="max-height: 200px; overflow-y: auto;">
                                <div class="loading">Âä†ËΩΩ‰∏≠...</div>
                            </div>
                        </div>


                    </div>
                </div>

                <!-- 4. ÈÄâ‰∏≠Áâ©‰ΩìËØ¶ÊÉÖÈù¢Êùø -->
                <div class="info-panel">
                    <div class="panel-header" onclick="togglePanel(this)">
                        <h3>üîç ÈÄâ‰∏≠Áâ©‰ΩìËØ¶ÊÉÖ</h3>
                        <span class="toggle-icon">‚ñº</span>
                    </div>
                    <div class="panel-content">
                        <div id="objectDetails">
                            <div style="color: #666; font-size: 12px; text-align: center; padding: 20px; background: #f8f9fa; border-radius: 6px; border: 2px dashed #ddd;">
                                <div style="font-size: 24px; margin-bottom: 8px;">üñ±Ô∏è</div>
                                <div>ÁÇπÂáªÂú∞Âõæ‰∏äÁöÑÁâ©‰ΩìÊàñÊô∫ËÉΩ‰ΩìÊü•ÁúãËØ¶ÁªÜ‰ø°ÊÅØ</div>
                                <div style="font-size: 10px; color: #999; margin-top: 4px;">ÂåÖÊã¨Â±ûÊÄß„ÄÅÁä∂ÊÄÅ„ÄÅÂÖ≥Á≥ª„ÄÅËÉΩÂäõÁ≠âÂÆåÊï¥‰ø°ÊÅØ</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="main-view">
            <div class="visualization-container">
                <div class="canvas-container">
                    <canvas id="visualizationCanvas"></canvas>
                    <div class="canvas-controls">
                        <button class="control-btn" onclick="resetView()">ÈáçÁΩÆËßÜÂõæ</button>
                    </div>
                    <div class="legend">
                        <div style="font-weight: bold; margin-bottom: 8px; color: #333;">Âõæ‰æãËØ¥Êòé</div>
                        <div class="legend-item">
                            <div class="legend-color" style="background: #8d6e63;"></div>
                            <span>ÂÆ∂ÂÖ∑ (FURNITURE)</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color" style="background: #2196f3;"></div>
                            <span>Áâ©ÂìÅ (ITEM)</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color" style="background: #ff9800;"></div>
                            <span>Â∑•ÂÖ∑ üîß</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color" style="background: #4caf50;"></div>
                            <span>Êô∫ËÉΩ‰Ωì ü§ñ</span>
                        </div>
                        <div style="margin: 10px 0; border-top: 1px solid #e0e0e0; padding-top: 8px;">
                            <div style="font-weight: bold; font-size: 11px; color: #666; margin-bottom: 4px;">ËæπÊ°ÜÈ¢úËâ≤Âê´‰πâ:</div>
                            <div class="legend-item">
                                <div class="legend-color" style="border: 3px solid #4caf50; background: transparent;"></div>
                                <span>Âú®...ÂÜÖÈÉ® (in)</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color" style="border: 3px solid #2196f3; background: transparent;"></div>
                                <span>Âú®...‰∏äÈù¢ (on)</span>
                            </div>
                        </div>
                        <div style="margin-top: 10px; border-top: 1px solid #e0e0e0; padding-top: 8px;">
                            <div style="font-size: 11px; color: #666;">
                                ‚Ä¢ Áâ©‰Ωì‰ª•ÂµåÂ•óÁõíÂ≠êÂΩ¢ÂºèÊòæÁ§∫<br>
                                ‚Ä¢ ÁÇπÂáªÁâ©‰ΩìÊàñÊàøÈó¥Êü•ÁúãËØ¶ÊÉÖ<br>
                                ‚Ä¢ ÊãñÊãΩÂíåÊªöËΩÆÁº©ÊîæÂú∞Âõæ
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <script src="/static/visualization.js"></script>
    <script>
        // ÂÜÖËÅîÈÖçÁΩÆ - ÈÄÇÁî®‰∫é‰∏ÄËá¥JSONÁªìÊûÑÁöÑÊï∞ÊçÆ
        const VISUALIZATION_CONFIG = {
            gridSize: 20,
            roomColors: { 'default': '#fafafa' },
            objectColors: {
                'FURNITURE': '#d7ccc8', 'ITEM': '#bbdefb', 'AGENT': '#c8e6c9',
                'TOOL': '#ffcc80', 'CONTAINER': '#e1bee7', 'DEVICE': '#ffcdd2',
                'MATERIAL': '#dcedc8', 'default': '#f5f5f5'
            },
            relationColors: {
                'in': '#4caf50', 'on': '#2196f3', 'near': '#ff9800',
                'attached': '#9c27b0', 'default': '#757575'
            },
            selectedColors: { background: '#fff3e0', border: '#ff9800', text: '#e65100' },
            layout: {
                roomPadding: 30, minRoomSize: 400, roomMargin: 120, maxRoomCols: 2,
                roomHeaderHeight: 100, roomAspectRatio: { min: 0.7, max: 2.2 },
                objectPadding: 15, minObjectSize: 120, maxObjectSize: 180,
                objectHeaderHeight: 35, objectAspectRatio: { min: 0.5, max: 3.0 },
                agentAreaWidth: 80, agentSize: 65, agentRadius: 30, agentMargin: 20,
                fontSize: 12, titleFontSize: 14, headerHeight: 45,
                columnRules: {
                    room: [
                        { maxObjects: 2, cols: 'actual' }, { maxObjects: 4, cols: 2 },
                        { maxObjects: 9, cols: 3 }, { maxObjects: 16, cols: 4 },
                        { maxObjects: Infinity, cols: 5 }
                    ],
                    object: [
                        { maxObjects: 2, cols: 'actual' }, { maxObjects: 4, cols: 2 },
                        { maxObjects: 9, cols: 3 }, { maxObjects: Infinity, cols: 4 }
                    ]
                }
            }
        };
    </script>
    <script>
        // ÂÖ®Â±ÄÂèòÈáè
        let visualization = null;
        let currentData = null;
        let updateInterval = null;

        // ÂàùÂßãÂåñ
        document.addEventListener('DOMContentLoaded', function() {
            initVisualization();
            startDataUpdates();
            initializePanels();
        });

        function initializePanels() {
            // ÈªòËÆ§Â±ïÂºÄÂü∫Êú¨‰ø°ÊÅØÂíåÁâ©ÂìÅÂàóË°®Èù¢Êùø
            const panels = document.querySelectorAll('.info-panel');
            panels.forEach((panel, index) => {
                if (index > 1) { // Èô§‰∫ÜÂâç‰∏§‰∏™Èù¢ÊùøÔºåÂÖ∂‰ªñÈÉΩÊäòÂè†
                    panel.classList.add('collapsed');
                }
            });
        }

        function togglePanel(header) {
            const panel = header.parentElement;
            panel.classList.toggle('collapsed');
        }

        function initVisualization() {
            // ÂàõÂª∫ÂèØËßÜÂåñÂÆû‰æãÔºå‰ΩøÁî®Â§ñÈÉ®ÈÖçÁΩÆ
            const config = window.VISUALIZATION_CONFIG || {};
            visualization = new SimulatorVisualization('visualizationCanvas', config);

            // ÁõëÂê¨ÊàøÈó¥ÈÄâÊã©‰∫ã‰ª∂
            document.getElementById('visualizationCanvas').addEventListener('roomSelected', function(e) {
                selectRoom(e.detail.roomId);
            });

            // ÁõëÂê¨Êô∫ËÉΩ‰ΩìÈÄâÊã©‰∫ã‰ª∂
            document.getElementById('visualizationCanvas').addEventListener('agentSelected', function(e) {
                selectAgent(e.detail.agent.id);
            });

            // ÁõëÂê¨Áâ©‰ΩìÈÄâÊã©‰∫ã‰ª∂
            document.getElementById('visualizationCanvas').addEventListener('objectSelected', function(e) {
                selectObject(e.detail.object);
            });
        }

        async function loadData() {
            try {
                const response = await fetch('/api/data');
                const data = await response.json();
                currentData = data;

                // Êõ¥Êñ∞ÂèØËßÜÂåñ
                if (visualization) {
                    visualization.updateData(data);
                }

                // Êõ¥Êñ∞UI
                updateSidebar(data);
                updateStatus('Â∑≤ËøûÊé• - ÊúÄÂêéÊõ¥Êñ∞: ' + new Date().toLocaleTimeString());

                // Â¶ÇÊûúÊòØÁ¨¨‰∏ÄÊ¨°Âä†ËΩΩÊï∞ÊçÆÔºåËÆæÁΩÆÂÆöÊó∂Âô®
                if (!updateInterval) {
                    const requestInterval = data?.metadata?.request_interval || 2000;
                    updateInterval = setInterval(loadData, requestInterval);
                }

            } catch (error) {
                console.error('Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•:', error);
                updateStatus('<span class="error">ËøûÊé•Â§±Ë¥•: ' + error.message + '</span>');
            }
        }

        function updateSidebar(data) {
            // 1. Êõ¥Êñ∞‰ªªÂä°‰ø°ÊÅØ
            updateTaskInfo(data);

            // 2. Êõ¥Êñ∞Êô∫ËÉΩ‰Ωì‰ø°ÊÅØ
            updateAgentInfo(data);

            // 3. Êõ¥Êñ∞ÁéØÂ¢É‰ø°ÊÅØ
            updateEnvironmentInfo(data);

            // 4. Áâ©‰ΩìËØ¶ÊÉÖÂú®ÈÄâ‰∏≠Êó∂Êõ¥Êñ∞ÔºåËøôÈáå‰∏çÈúÄË¶ÅÂ§ÑÁêÜ
        }

        function updateTaskInfo(data) {

            // Êõ¥Êñ∞ÊâÄÊúâ‰ªªÂä°ÂàóË°®
            const allTasksList = document.getElementById('allTasksList');
            if (!allTasksList) return;

            // ÊòæÁ§∫TODO listÂΩ¢ÂºèÁöÑ‰ªªÂä°ÂàóË°®
            if (data.detailed_tasks && data.detailed_tasks.length > 0) {
                let tasksHtml = '';

                // ÊòæÁ§∫ÊÄª‰ΩìËøõÂ∫¶Ê¶ÇËßàÔºàÂü∫‰∫éËØ¶ÁªÜ‰ªªÂä°ËÆ°ÁÆóÔºâ
                const totalTasks = data.detailed_tasks.length;
                const completedTasks = data.detailed_tasks.filter(task => task.is_completed).length;
                const completionRate = totalTasks > 0 ? completedTasks / totalTasks : 0;
                const progressBarWidth = Math.round(completionRate * 100);
                const isAllCompleted = completionRate >= 1.0;
                const statusIcon = isAllCompleted ? '‚úÖ' : '‚è≥';
                const statusColor = isAllCompleted ? '#4caf50' : '#ff9800';

                tasksHtml += `
                    <div style="padding: 12px; margin: 8px 0; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 8px; border: 2px solid #007bff; box-shadow: 0 3px 6px rgba(0,0,0,0.1);">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                            <div style="font-weight: 600; font-size: 14px; color: #007bff;">üìã ‰ªªÂä°ÊÄªËßà</div>
                            <div style="font-size: 12px; color: ${statusColor}; font-weight: 600;">${statusIcon} ${completedTasks}/${totalTasks} (${(completionRate * 100).toFixed(1)}%)</div>
                        </div>
                        <div style="font-size: 11px; color: #666; margin-bottom: 8px;">ÂÖ± ${totalTasks} ‰∏™‰ªªÂä°ÔºåÂ∑≤ÂÆåÊàê ${completedTasks} ‰∏™</div>
                        <div style="width: 100%; height: 8px; background: #e0e0e0; border-radius: 4px; overflow: hidden;">
                            <div style="width: ${progressBarWidth}%; height: 100%; background: linear-gradient(90deg, ${isAllCompleted ? '#4caf50' : '#ff9800'}, ${isAllCompleted ? '#66bb6a' : '#ffb74d'}); transition: width 0.3s ease;"></div>
                        </div>
                    </div>
                `;

                // TODO List Ê†áÈ¢ò
                tasksHtml += `
                    <div style="padding: 8px 0; margin: 8px 0 4px 0; border-bottom: 2px solid #e0e0e0;">
                        <div style="font-weight: 600; font-size: 13px; color: #333; display: flex; align-items: center; gap: 8px;">
                            üìù ‰ªªÂä°Ê∏ÖÂçï (TODO List)
                        </div>
                    </div>
                `;

                // ÊòæÁ§∫ÊâÄÊúâ‰ªªÂä°ÁöÑÊâÅÂπ≥TODOÂàóË°®
                data.detailed_tasks.forEach((task, index) => {
                    const taskCompleted = task.is_completed || false;
                    const checkboxStyle = taskCompleted ?
                        'background: #4caf50; border: 2px solid #4caf50; color: white;' :
                        'background: white; border: 2px solid #ddd; color: transparent;';

                    const taskTextStyle = taskCompleted ?
                        'text-decoration: line-through; color: #666;' :
                        'color: #333;';

                    const taskBg = taskCompleted ? '#f8f9fa' : '#ffffff';
                    const borderColor = taskCompleted ? '#4caf50' : '#e0e0e0';

                    // Á±ªÂà´ÂõæÊ†áÂíåÈ¢úËâ≤
                    const categoryIcon = task.category.includes('single_agent') ? 'ü§ñ' : 'üë•';
                    const categoryColor = task.category.includes('single_agent') ? '#2196f3' : '#ff9800';

                    tasksHtml += `
                        <div style="padding: 6px 8px; margin: 2px 0; background: ${taskBg}; border-radius: 4px; border-left: 3px solid ${borderColor}; transition: all 0.2s ease;">
                            <div style="display: flex; align-items: center; gap: 8px;">
                                <!-- Â∫èÂè∑ÂíåÂ§çÈÄâÊ°Ü -->
                                <div style="display: flex; align-items: center; gap: 4px; flex-shrink: 0;">
                                    <span style="font-size: 9px; color: #999; font-weight: 500; min-width: 14px; text-align: right;">${index + 1}.</span>
                                    <div style="width: 14px; height: 14px; border-radius: 2px; ${checkboxStyle} display: flex; align-items: center; justify-content: center; font-size: 9px;">
                                        ${taskCompleted ? '‚úì' : ''}
                                    </div>
                                </div>

                                <!-- ‰ªªÂä°ÂÜÖÂÆπ -->
                                <div style="flex: 1; min-width: 0;">
                                    <div style="font-size: 11px; line-height: 1.3; margin-bottom: 2px; ${taskTextStyle}">
                                        ${task.description || 'Êó†ÊèèËø∞'}
                                    </div>
                                    <div style="display: flex; align-items: center; gap: 4px;">
                                        <span style="background: ${categoryColor}15; color: ${categoryColor}; padding: 1px 3px; border-radius: 6px; font-weight: 500; font-size: 8px;">
                                            ${categoryIcon} ${task.category_name}
                                        </span>
                                    </div>
                                </div>

                                <!-- Áä∂ÊÄÅÂõæÊ†á -->
                                <div style="font-size: 12px; flex-shrink: 0;">
                                    ${taskCompleted ? '‚úÖ' : '‚≠ï'}
                                </div>
                            </div>
                        </div>
                    `;
                });

                allTasksList.innerHTML = tasksHtml;
            } else {
                allTasksList.innerHTML = '<div style="color: #999; font-size: 11px; text-align: center; padding: 10px;">ÊöÇÊó†‰ªªÂä°ÂàóË°®</div>';
            }

            // Êõ¥Êñ∞ÊîØÊåÅÁöÑÂä®‰Ωú
            const supportedActions = document.getElementById('supportedActions');
            if (!supportedActions) return;

            if (data.supported_actions && data.supported_actions.length > 0) {
                // ÊåâÁ±ªÂûãÂàÜÁªÑÂä®‰Ωú
                const actionsByType = {};
                data.supported_actions.forEach(action => {
                    const type = action.requires_tool ? 'ÈúÄË¶ÅÂ∑•ÂÖ∑' : 'Âü∫Á°ÄÂä®‰Ωú';
                    if (!actionsByType[type]) actionsByType[type] = [];
                    actionsByType[type].push(action);
                });

                supportedActions.innerHTML = Object.entries(actionsByType).map(([type, actions]) => `
                    <div style="margin-bottom: 10px;">
                        <div style="font-weight: 600; font-size: 10px; color: #666; margin-bottom: 4px; text-transform: uppercase;">${type} (${actions.length})</div>
                        <div style="display: flex; flex-wrap: wrap; gap: 2px;">
                            ${actions.map(action => `
                                <span style="font-size: 9px; background: ${action.requires_tool ? '#fff3e0' : '#e8f5e8'}; color: ${action.requires_tool ? '#f57c00' : '#2e7d32'}; padding: 2px 4px; border-radius: 3px; border: 1px solid ${action.requires_tool ? '#ffcc02' : '#4caf50'};">
                                    ${action.requires_tool ? 'üîß' : '‚ö°'} ${action.name}
                                </span>
                            `).join('')}
                        </div>
                    </div>
                `).join('');
            } else {
                supportedActions.innerHTML = '<div style="color: #999; font-size: 11px; text-align: center; padding: 10px;">ÊöÇÊó†Âä®‰Ωú‰ø°ÊÅØ</div>';
            }
        }

        function updateAgentInfo(data) {
            const agentStatusList = document.getElementById('agentStatusList');
            if (!agentStatusList) return;

            if (data.agents && data.agents.length > 0) {
                agentStatusList.innerHTML = data.agents.map(agent => {
                    const inventoryItems = agent.inventory || [];
                    const abilities = agent.abilities || [];
                    const location = agent.location_id || agent.location || 'Êú™Áü•‰ΩçÁΩÆ';

                    // Ëé∑ÂèñÁâ©ÂìÅËØ¶ÁªÜ‰ø°ÊÅØ
                    const inventoryDetails = inventoryItems.map(itemId => {
                        const item = data.objects ? data.objects.find(obj => obj.id === itemId) : null;
                        return {
                            id: itemId,
                            name: item ? item.name : itemId,
                            is_tool: item ? (item.properties && item.properties.provides_abilities) : false
                        };
                    });

                    return `
                        <div class="agent-status-card" onclick="selectAgent('${agent.id}')" data-agent-id="${agent.id}">
                            <div class="agent-name">
                                <span>ü§ñ</span>
                                <span>${agent.name || agent.id}</span>
                                ${agent.corporate_mode_object_id ? '<span style="color: #ff9800; font-size: 10px;">ü§ùÂêà‰Ωú‰∏≠</span>' : ''}
                            </div>

                            <div class="agent-location">
                                üìç ‰ΩçÁΩÆ: ${location}
                            </div>

                            <div class="agent-inventory">
                                üéí Â∫ìÂ≠ò (${inventoryItems.length}/${agent.max_grasp_limit || 1}):
                                ${inventoryDetails.length > 0 ? `
                                    <div style="margin-top: 4px;">
                                        ${inventoryDetails.map(item => `
                                            <span class="inventory-item ${item.is_tool ? 'tool' : ''}" title="${item.name} (${item.id})">
                                                ${item.is_tool ? 'üîß' : 'üì¶'} ${item.name}
                                            </span>
                                        `).join('')}
                                    </div>
                                ` : '<span style="color: #999; font-size: 10px;">Á©∫</span>'}
                            </div>

                            ${abilities.length > 0 ? `
                                <div style="margin-top: 8px;">
                                    <div style="font-size: 11px; color: #666; margin-bottom: 4px;">‚ö° ÂΩìÂâçËÉΩÂäõ:</div>
                                    <div class="agent-abilities">
                                        ${abilities.map(ability => `
                                            <span class="ability-tag">${ability}</span>
                                        `).join('')}
                                    </div>
                                </div>
                            ` : '<div style="font-size: 10px; color: #999; margin-top: 4px;">‚ö° ÊöÇÊó†ÁâπÊÆäËÉΩÂäõ</div>'}

                            ${agent.corporate_mode_object_id ? `
                                <div style="margin-top: 6px; padding: 4px 8px; background: #fff3e0; border-radius: 4px; border-left: 3px solid #ff9800;">
                                    <div style="font-size: 10px; color: #f57c00;">
                                        ü§ù Ê≠£Âú®‰∏éÂÖ∂‰ªñÊô∫ËÉΩ‰ΩìÂêà‰ΩúÊê¨Ëøê: ${agent.corporate_mode_object_id}
                                    </div>
                                </div>
                            ` : ''}
                        </div>
                    `;
                }).join('');
            } else {
                agentStatusList.innerHTML = '<div style="color: #999; font-size: 12px; text-align: center; padding: 20px;">ÊöÇÊó†Êô∫ËÉΩ‰Ωì‰ø°ÊÅØ</div>';
            }
        }

        function selectAgent(agentId) {
            // È´ò‰∫ÆÈÄâ‰∏≠ÁöÑÊô∫ËÉΩ‰ΩìÂç°Áâá
            document.querySelectorAll('.agent-status-card').forEach(card => {
                card.classList.remove('selected');
            });
            const agentCard = document.querySelector(`[data-agent-id="${agentId}"]`);
            if (agentCard) {
                agentCard.classList.add('selected');
            }

            // Âú®ÂèØËßÜÂåñ‰∏≠È´ò‰∫ÆÊô∫ËÉΩ‰Ωì
            if (visualization) {
                visualization.selectAgent(agentId);
            }

            // Âú®ËØ¶ÊÉÖÈù¢ÊùøÊòæÁ§∫Êô∫ËÉΩ‰Ωì‰ø°ÊÅØ
            if (currentData && currentData.agents) {
                const agent = currentData.agents.find(a => a.id === agentId);
                if (agent) {
                    showAgentDetails(agent);
                }
            }
        }

        function showAgentDetails(agent) {
            const objectDetails = document.getElementById('objectDetails');
            if (!objectDetails) return;

            const inventoryItems = agent.inventory || [];
            const abilities = agent.abilities || [];

            // Ëé∑ÂèñÁâ©ÂìÅËØ¶ÁªÜ‰ø°ÊÅØ
            const inventoryDetails = inventoryItems.map(itemId => {
                const item = currentData && currentData.objects ? currentData.objects.find(obj => obj.id === itemId) : null;
                return item || { id: itemId, name: itemId, type: 'UNKNOWN' };
            });

            objectDetails.innerHTML = `
                <div style="border: 2px solid #4caf50; border-radius: 8px; padding: 15px; background: #f8fff8;">
                    <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 12px;">
                        <span style="font-size: 24px;">ü§ñ</span>
                        <div>
                            <div style="font-weight: 600; font-size: 16px; color: #2e7d32;">${agent.name || agent.id}</div>
                            <div style="font-size: 12px; color: #666;">Êô∫ËÉΩ‰Ωì ID: ${agent.id}</div>
                        </div>
                    </div>

                    <div style="margin-bottom: 12px;">
                        <h4 style="margin: 0 0 6px 0; font-size: 13px; color: #333; border-bottom: 1px solid #e0e0e0; padding-bottom: 2px;">üìç ‰ΩçÁΩÆ‰ø°ÊÅØ</h4>
                        <div style="font-size: 12px; color: #333;">ÂΩìÂâç‰ΩçÁΩÆ: ${agent.location_id || agent.location || 'Êú™Áü•'}</div>
                        ${agent.near_objects && agent.near_objects.length > 0 ? `
                            <div style="font-size: 11px; color: #666; margin-top: 4px;">
                                ÈôÑËøëÁâ©‰Ωì: ${Array.from(agent.near_objects).join(', ')}
                            </div>
                        ` : ''}
                    </div>

                    <div style="margin-bottom: 12px;">
                        <h4 style="margin: 0 0 6px 0; font-size: 13px; color: #333; border-bottom: 1px solid #e0e0e0; padding-bottom: 2px;">üéí Â∫ìÂ≠ò‰ø°ÊÅØ</h4>
                        <div style="font-size: 12px; color: #333; margin-bottom: 6px;">
                            ÂÆπÈáè: ${inventoryItems.length}/${agent.max_grasp_limit || 1}
                            ${agent.properties && agent.properties.max_weight ? ` | ÊúÄÂ§ßÊâøÈáç: ${agent.properties.max_weight}kg` : ''}
                        </div>
                        ${inventoryDetails.length > 0 ? `
                            <div style="display: flex; flex-wrap: wrap; gap: 6px; margin-top: 6px;">
                                ${inventoryDetails.map(item => `
                                    <div style="background: ${item.properties && item.properties.provides_abilities ? '#ffcc80' : '#e3f2fd'};
                                                color: ${item.properties && item.properties.provides_abilities ? '#e65100' : '#1976d2'};
                                                padding: 4px 8px; border-radius: 12px; font-size: 11px; cursor: pointer;"
                                         onclick="selectObject('${item.id}')">
                                        ${item.properties && item.properties.provides_abilities ? 'üîß' : 'üì¶'} ${item.name}
                                    </div>
                                `).join('')}
                            </div>
                        ` : '<div style="color: #999; font-size: 11px;">Â∫ìÂ≠ò‰∏∫Á©∫</div>'}
                    </div>

                    <div style="margin-bottom: 12px;">
                        <h4 style="margin: 0 0 6px 0; font-size: 13px; color: #333; border-bottom: 1px solid #e0e0e0; padding-bottom: 2px;">‚ö° ËÉΩÂäõ‰ø°ÊÅØ</h4>
                        ${abilities.length > 0 ? `
                            <div style="display: flex; flex-wrap: wrap; gap: 4px;">
                                ${abilities.map(ability => `
                                    <span style="background: #e8f5e8; color: #2e7d32; padding: 3px 8px; border-radius: 12px; font-size: 11px; font-weight: 500;">
                                        ${ability}
                                    </span>
                                `).join('')}
                            </div>
                        ` : '<div style="color: #999; font-size: 11px;">ÊöÇÊó†ÁâπÊÆäËÉΩÂäõ</div>'}
                    </div>

                    ${agent.corporate_mode_object_id ? `
                        <div style="margin-bottom: 12px;">
                            <h4 style="margin: 0 0 6px 0; font-size: 13px; color: #333; border-bottom: 1px solid #e0e0e0; padding-bottom: 2px;">ü§ù Âêà‰ΩúÁä∂ÊÄÅ</h4>
                            <div style="background: #fff3e0; padding: 8px; border-radius: 6px; border-left: 4px solid #ff9800;">
                                <div style="font-size: 12px; color: #f57c00; font-weight: 500;">Ê≠£Âú®Âêà‰ΩúÊê¨Ëøê</div>
                                <div style="font-size: 11px; color: #333; margin-top: 2px;">ÁõÆÊ†áÁâ©‰Ωì: ${agent.corporate_mode_object_id}</div>
                            </div>
                        </div>
                    ` : ''}

                    ${agent.properties ? `
                        <div>
                            <h4 style="margin: 0 0 6px 0; font-size: 13px; color: #333; border-bottom: 1px solid #e0e0e0; padding-bottom: 2px;">üîß Â±ûÊÄß‰ø°ÊÅØ</h4>
                            <div style="font-size: 11px; color: #666; line-height: 1.4;">
                                ${Object.entries(agent.properties).map(([key, value]) => `
                                    <div><strong>${key}:</strong> ${JSON.stringify(value)}</div>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}
                </div>
            `;
        }

        function updateEnvironmentInfo(data) {
            // Êõ¥Êñ∞ÁéØÂ¢ÉÁªüËÆ°
            const environmentStats = document.getElementById('environmentStats');
            if (!environmentStats) return;

            environmentStats.innerHTML = `
                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 8px; margin-bottom: 10px;">
                    <div style="text-align: center; padding: 8px; background: #e3f2fd; border-radius: 4px;">
                        <div style="font-size: 16px; font-weight: 600; color: #1976d2;">${data.rooms.length}</div>
                        <div style="font-size: 10px; color: #666;">ÊàøÈó¥</div>
                    </div>
                    <div style="text-align: center; padding: 8px; background: #e8f5e8; border-radius: 4px;">
                        <div style="font-size: 16px; font-weight: 600; color: #2e7d32;">${data.agents.length}</div>
                        <div style="font-size: 10px; color: #666;">Êô∫ËÉΩ‰Ωì</div>
                    </div>
                    <div style="text-align: center; padding: 8px; background: #fff3e0; border-radius: 4px;">
                        <div style="font-size: 16px; font-weight: 600; color: #f57c00;">${data.objects.length}</div>
                        <div style="font-size: 10px; color: #666;">Áâ©‰Ωì</div>
                    </div>
                </div>
            `;

            // Êõ¥Êñ∞ÊàøÈó¥ÂàóË°®
            const roomList = document.getElementById('roomList');
            if (!roomList) return;

            roomList.innerHTML = data.rooms.map(room =>
                `<div class="room-item" onclick="selectRoom('${room.id}')" data-room-id="${room.id}" style="padding: 8px; margin: 4px 0; background: #f8f9fa; border-radius: 4px; cursor: pointer; border-left: 3px solid #2196f3; transition: all 0.2s ease;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <div style="font-weight: 600; color: #333; margin-bottom: 2px; font-size: 12px;">üè† ${room.name}</div>
                            <div style="font-size: 10px; color: #666;">${room.type}</div>
                        </div>
                        <div style="text-align: right; font-size: 10px; color: #666;">
                            <div>Áâ©‰Ωì: ${room.objects_count}</div>
                            <div>Êô∫ËÉΩ‰Ωì: ${room.agents_count}</div>
                        </div>
                    </div>
                </div>`
            ).join('');

            // Êõ¥Êñ∞Êô∫ËÉΩ‰ΩìÂàóË°®
            const agentList = document.getElementById('agentList');
            if (!agentList) return;

            agentList.innerHTML = data.agents.map(agent =>
                `<div class="agent-item" onclick="focusAgent('${agent.id}')" style="padding: 8px; margin: 4px 0; background: #f8f9fa; border-radius: 4px; cursor: pointer; border-left: 3px solid #4caf50; transition: all 0.2s ease;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <div style="font-weight: 600; color: #333; margin-bottom: 2px; font-size: 12px;">ü§ñ ${agent.name}</div>
                            <div style="font-size: 10px; color: #666;">${agent.location}</div>
                        </div>
                        <div style="text-align: right; font-size: 10px; color: #666;">
                            <div>${agent.status}</div>
                            <div>Â∫ìÂ≠ò: ${agent.inventory.length}</div>
                        </div>
                    </div>
                </div>`
            ).join('');


        }









        // ÂàáÊç¢Á±ªÂà´Â±ïÂºÄ/ÊäòÂè†Áä∂ÊÄÅ
        function toggleCategory(categoryId) {
            const categoryDiv = document.getElementById('category-' + categoryId);
            const toggleIcon = document.getElementById('toggle-' + categoryId);

            if (categoryDiv && toggleIcon) {
                const isVisible = categoryDiv.style.display !== 'none';
                categoryDiv.style.display = isVisible ? 'none' : 'block';
                toggleIcon.textContent = isVisible ? '‚ñ∂' : '‚ñº';
                toggleIcon.style.transform = isVisible ? 'rotate(0deg)' : 'rotate(90deg)';
            }
        }

        function updateStatus(message) {
            const statusElement = document.getElementById('status');
            if (statusElement) {
                statusElement.innerHTML = message;
            }
        }

        function selectRoom(roomId) {
            // Êõ¥Êñ∞UIÈÄâ‰∏≠Áä∂ÊÄÅ
            document.querySelectorAll('.room-item').forEach(item => {
                item.classList.remove('selected');
                item.style.borderLeftColor = '#2196f3';
            });
            const selectedRoom = document.querySelector(`[data-room-id="${roomId}"]`);
            if (selectedRoom) {
                selectedRoom.classList.add('selected');
                selectedRoom.style.borderLeftColor = '#ff9800';
            }

            // Êõ¥Êñ∞ÂèØËßÜÂåñ
            if (visualization) {
                visualization.selectRoom(roomId);
            }
        }

        function focusAgent(agentId) {
            if (!currentData || !currentData.agents) return;

            const agent = currentData.agents.find(a => a.id === agentId);
            if (agent) {
                // È´ò‰∫ÆÊô∫ËÉΩ‰ΩìÊâÄÂú®ÊàøÈó¥
                selectRoom(agent.location);

                // Âú®ÂèØËßÜÂåñ‰∏≠ËÅöÁÑ¶Âà∞Êô∫ËÉΩ‰Ωì
                if (visualization) {
                    visualization.focusAgent(agentId);
                }
            }
        }

        function selectObject(obj) {
            // Êõ¥Êñ∞Áâ©‰ΩìËØ¶ÊÉÖÊòæÁ§∫
            showObjectDetails(obj);

            // Â¶ÇÊûúÁâ©‰ΩìÂú®Êüê‰∏™ÊàøÈó¥Ôºå‰πüÈÄâ‰∏≠ËØ•ÊàøÈó¥
            const roomId = findObjectRoom(obj);
            if (roomId) {
                selectRoom(roomId);
            }
        }

        function findObjectRoom(obj) {
            if (!obj.layout_info) return null;

            if (obj.layout_info.is_root_level) {
                return obj.layout_info.parent_id;
            }

            // ÈÄíÂΩíÊü•ÊâæÊ†πÊàøÈó¥
            if (currentData && currentData.objects) {
                const parentObj = currentData.objects.find(o => o.id === obj.layout_info.parent_id);
                if (parentObj) {
                    return findObjectRoom(parentObj);
                }
            }

            return obj.layout_info.parent_id;
        }

        function showObjectDetails(obj) {
            const detailsPanel = document.getElementById('objectDetails');
            if (!detailsPanel) return;

            // Ëé∑ÂèñÂåÖÂê´ÁöÑÁâ©‰Ωì
            const containedObjects = obj.contained_objects ?
                obj.contained_objects.map(id => currentData.objects.find(o => o.id === id)).filter(o => o) : [];

            const containerInfo = obj.container_info || {};
            const typeIcon = obj.is_tool ? 'üîß' : (obj.type === 'FURNITURE' ? 'ü™ë' : 'üì¶');
            const borderColor = obj.is_tool ? '#ff9800' : (obj.type === 'FURNITURE' ? '#8d6e63' : '#2196f3');

            detailsPanel.innerHTML = `
                <div style="padding: 15px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid ${borderColor};">
                    <h4 style="margin: 0 0 15px 0; color: #333; font-size: 16px; display: flex; align-items: center; gap: 8px;">
                        ${typeIcon} ${obj.name}
                        <span style="font-size: 11px; background: ${borderColor}; color: white; padding: 2px 6px; border-radius: 10px; font-weight: normal;">
                            ${obj.type}
                        </span>
                    </h4>

                    <div style="font-size: 13px; line-height: 1.5; margin-bottom: 15px;">
                        <div style="display: grid; grid-template-columns: auto 1fr; gap: 8px 12px; align-items: start;">
                            <strong>ID:</strong> <span style="font-family: monospace; font-size: 11px; background: #e9ecef; padding: 2px 4px; border-radius: 3px;">${obj.id}</span>
                            <strong>‰ΩçÁΩÆ:</strong> <span>${obj.location?.type || 'unknown'} ${obj.location?.target || ''}</span>
                            ${containerInfo.is_contained ? `
                                <strong>ÂÆπÂô®:</strong> <span>${containerInfo.relation_type} ${containerInfo.container_name}</span>
                            ` : ''}
                            ${obj.provides_abilities && obj.provides_abilities.length > 0 ? `
                                <strong>Êèê‰æõËÉΩÂäõ:</strong> <span>${obj.provides_abilities.join(', ')}</span>
                            ` : ''}
                            ${containedObjects.length > 0 ? `
                                <strong>ÂåÖÂê´Áâ©‰Ωì:</strong> <span>${containedObjects.length} È°π</span>
                            ` : ''}
                        </div>
                    </div>

                    ${obj.states && Object.keys(obj.states).length > 0 ? `
                        <div style="margin-bottom: 15px; padding: 10px; background: rgba(33,150,243,0.1); border-radius: 6px;">
                            <strong style="font-size: 12px; color: #666; display: block; margin-bottom: 6px;">Áä∂ÊÄÅ‰ø°ÊÅØ:</strong>
                            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 4px;">
                                ${Object.entries(obj.states).map(([key, value]) => `
                                    <div style="font-size: 11px; background: white; padding: 4px 6px; border-radius: 3px; border-left: 3px solid #2196f3;">
                                        <strong>${key}:</strong> ${value}
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}

                    ${obj.properties && Object.keys(obj.properties).length > 0 ? `
                        <div style="margin-bottom: 15px; padding: 10px; background: rgba(76,175,80,0.1); border-radius: 6px;">
                            <strong style="font-size: 12px; color: #666; display: block; margin-bottom: 6px;">Â±ûÊÄß‰ø°ÊÅØ:</strong>
                            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 4px;">
                                ${Object.entries(obj.properties).map(([key, value]) => `
                                    <div style="font-size: 11px; background: white; padding: 4px 6px; border-radius: 3px; border-left: 3px solid #4caf50;">
                                        <strong>${key}:</strong> ${typeof value === 'object' ? JSON.stringify(value) : value}
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}

                    ${containedObjects.length > 0 ? `
                        <div style="margin-bottom: 15px; padding: 10px; background: rgba(255,152,0,0.1); border-radius: 6px;">
                            <strong style="font-size: 12px; color: #666; display: block; margin-bottom: 8px;">ÂåÖÂê´ÁöÑÁâ©‰Ωì (${containedObjects.length}):</strong>
                            <div style="max-height: 150px; overflow-y: auto;">
                                ${containedObjects.map(cObj => {
                                    const cTypeIcon = cObj.is_tool ? 'üîß' : (cObj.type === 'FURNITURE' ? 'ü™ë' : 'üì¶');
                                    const cBorderColor = cObj.is_tool ? '#ff9800' : (cObj.type === 'FURNITURE' ? '#8d6e63' : '#2196f3');
                                    return `
                                        <div onclick="selectObject(currentData.objects.find(o => o.id === '${cObj.id}'))" style="margin: 4px 0; padding: 6px 8px; background: white; border-radius: 4px; cursor: pointer; border-left: 3px solid ${cBorderColor}; transition: background-color 0.2s ease;">
                                            <div style="font-size: 12px; font-weight: 500; color: #333; margin-bottom: 2px;">
                                                ${cTypeIcon} ${cObj.name}
                                            </div>
                                            <div style="font-size: 10px; color: #666;">
                                                ${cObj.type} | ${cObj.location?.type || 'unknown'}
                                            </div>
                                        </div>
                                    `;
                                }).join('')}
                            </div>
                        </div>
                    ` : ''}

                    <div style="font-size: 11px; color: #999; font-style: italic; text-align: center; padding-top: 10px; border-top: 1px solid #e0e0e0;">
                        üí° ÁÇπÂáªÂú∞Âõæ‰∏äÁöÑÂÖ∂‰ªñÁâ©‰ΩìÊàñÊàøÈó¥Êü•ÁúãËØ¶ÊÉÖ
                    </div>
                </div>
            `;
        }



        function startDataUpdates() {
            loadData(); // Á´ãÂç≥Âä†ËΩΩ‰∏ÄÊ¨°ÔºåÂÆöÊó∂Âô®‰ºöÂú®loadData‰∏≠ËÆæÁΩÆ
        }

        function stopDataUpdates() {
            if (updateInterval) {
                clearInterval(updateInterval);
                updateInterval = null;
            }
        }

        // ÊéßÂà∂ÂáΩÊï∞
        function resetView() {
            if (visualization) {
                visualization.fitToContent();
            }
        }



        // È°µÈù¢Âç∏ËΩΩÊó∂Ê∏ÖÁêÜ
        window.addEventListener('beforeunload', function() {
            stopDataUpdates();
        });
    </script>

    <!-- Â§ñÈÉ®ÂèØËßÜÂåñJavaScript -->
    <script src="/static/visualization.js"></script>
    <script>
        // È°µÈù¢ÁâπÂÆöÁöÑJavaScript‰ª£Á†Å
        // SimulatorVisualizationÁ±ªÂ∑≤Âú®Â§ñÈÉ®Êñá‰ª∂‰∏≠ÂÆö‰πâ
    </script>
</body>
</html>"""


class ThreadingHTTPServer(ThreadingMixIn, HTTPServer):
    """ÊîØÊåÅÂ§öÁ∫øÁ®ãÁöÑHTTPÊúçÂä°Âô®"""
    daemon_threads = True



class VisualizationWebServer:
    """ÂèØËßÜÂåñWebÊúçÂä°Âô®"""

    def __init__(self, data_provider, config: Optional[Dict] = None):
        """
        ÂàùÂßãÂåñWebÊúçÂä°Âô®

        Args:
            data_provider: Êï∞ÊçÆÊèê‰æõÂô®
            config: ÊúçÂä°Âô®ÈÖçÁΩÆ
        """
        self.data_provider = data_provider
        self.config = config or {}
        self.server = None
        self.server_thread = None
        self.running = False

        # ÊúçÂä°Âô®ÈÖçÁΩÆ
        self.host = self.config.get('web_server', {}).get('host', 'localhost')
        self.port = self.config.get('web_server', {}).get('port', 8080)
        self.auto_open_browser = self.config.get('web_server', {}).get('auto_open_browser', True)

    def start(self):
        """ÂêØÂä®WebÊúçÂä°Âô®"""
        if self.running:
            logging.warning("WebÊúçÂä°Âô®Â∑≤Âú®ËøêË°å")
            return

        try:
            # ÂàõÂª∫ËØ∑Ê±ÇÂ§ÑÁêÜÂô®Á±ª
            handler_class = lambda *args, **kwargs: VisualizationRequestHandler(
                *args, data_provider=self.data_provider, config=self.config, **kwargs
            )

            # ÂàõÂª∫ÊúçÂä°Âô®
            self.server = ThreadingHTTPServer((self.host, self.port), handler_class)

            # Âú®ÂçïÁã¨Á∫øÁ®ã‰∏≠ËøêË°åÊúçÂä°Âô®
            self.server_thread = threading.Thread(target=self._run_server, daemon=True)
            self.server_thread.start()

            self.running = True

            server_url = f"http://{self.host}:{self.port}"
            logging.info(f"ÂèØËßÜÂåñWebÊúçÂä°Âô®Â∑≤ÂêØÂä®: {server_url}")

            # Ëá™Âä®ÊâìÂºÄÊµèËßàÂô®
            if self.auto_open_browser:
                try:
                    webbrowser.open(server_url)
                    logging.info("Â∑≤Ëá™Âä®ÊâìÂºÄÊµèËßàÂô®")
                except Exception as e:
                    logging.warning(f"Êó†Ê≥ïËá™Âä®ÊâìÂºÄÊµèËßàÂô®: {e}")

        except Exception as e:
            logging.error(f"ÂêØÂä®WebÊúçÂä°Âô®Â§±Ë¥•: {e}")
            raise

    def stop(self):
        """ÂÅúÊ≠¢WebÊúçÂä°Âô®"""
        if not self.running:
            return

        try:
            if self.server:
                self.server.shutdown()
                self.server.server_close()

            if self.server_thread and self.server_thread.is_alive():
                self.server_thread.join(timeout=5)

            self.running = False
            logging.info("ÂèØËßÜÂåñWebÊúçÂä°Âô®Â∑≤ÂÅúÊ≠¢")

        except Exception as e:
            logging.error(f"ÂÅúÊ≠¢WebÊúçÂä°Âô®Â§±Ë¥•: {e}")

    def _run_server(self):
        """ËøêË°åÊúçÂä°Âô®ÁöÑÂÜÖÈÉ®ÊñπÊ≥ï"""
        try:
            self.server.serve_forever()
        except Exception as e:
            if self.running:  # Âè™ÊúâÂú®Â∫îËØ•ËøêË°åÊó∂ÊâçËÆ∞ÂΩïÈîôËØØ
                logging.error(f"WebÊúçÂä°Âô®ËøêË°åÈîôËØØ: {e}")

    def is_running(self) -> bool:
        """Ê£ÄÊü•ÊúçÂä°Âô®ÊòØÂê¶Âú®ËøêË°å"""
        return self.running

    def get_server_url(self) -> str:
        """Ëé∑ÂèñÊúçÂä°Âô®URL"""
        return f"http://{self.host}:{self.port}"
